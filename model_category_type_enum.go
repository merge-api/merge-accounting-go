/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_accounting_client

import (
	"encoding/json"
	"fmt"
)

// CategoryTypeEnum the model 'CategoryTypeEnum'
type CategoryTypeEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of CategoryTypeEnum
const (
    CATEGORYTYPEENUM_MERGE_NONSTANDARD_VALUE CategoryTypeEnum = "MERGE_NONSTANDARD_VALUE"
    
	CATEGORYTYPEENUM_CLASS CategoryTypeEnum = "CLASS"
	CATEGORYTYPEENUM_DEPARTMENT CategoryTypeEnum = "DEPARTMENT"
)

var allowedCategoryTypeEnumEnumValues = []CategoryTypeEnum{
	"CLASS",
	"DEPARTMENT",
}

func (v *CategoryTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CategoryTypeEnum(value)
	for _, existing := range allowedCategoryTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = CATEGORYTYPEENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewCategoryTypeEnumFromValue returns a pointer to a valid CategoryTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCategoryTypeEnumFromValue(v string) (*CategoryTypeEnum, error) {
	ev := CategoryTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := CATEGORYTYPEENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CategoryTypeEnum) IsValid() bool {
	for _, existing := range allowedCategoryTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CategoryTypeEnum value
func (v CategoryTypeEnum) Ptr() *CategoryTypeEnum {
	return &v
}

type NullableCategoryTypeEnum struct {
	value *CategoryTypeEnum
	isSet bool
}

func (v NullableCategoryTypeEnum) Get() *CategoryTypeEnum {
	return v.value
}

func (v *NullableCategoryTypeEnum) Set(val *CategoryTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCategoryTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCategoryTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategoryTypeEnum(val *CategoryTypeEnum) *NullableCategoryTypeEnum {
	return &NullableCategoryTypeEnum{value: val, isSet: true}
}

func (v NullableCategoryTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategoryTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

