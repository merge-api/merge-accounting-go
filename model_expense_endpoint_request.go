/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_accounting_client

import (
	"encoding/json"
)

// ExpenseEndpointRequest struct for ExpenseEndpointRequest
type ExpenseEndpointRequest struct {
	Model ExpenseRequest `json:"model"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewExpenseEndpointRequest instantiates a new ExpenseEndpointRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpenseEndpointRequest(model ExpenseRequest) *ExpenseEndpointRequest {
	this := ExpenseEndpointRequest{}
	this.Model = model
	return &this
}

// NewExpenseEndpointRequestWithDefaults instantiates a new ExpenseEndpointRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpenseEndpointRequestWithDefaults() *ExpenseEndpointRequest {
	this := ExpenseEndpointRequest{}
	return &this
}

// GetModel returns the Model field value
func (o *ExpenseEndpointRequest) GetModel() ExpenseRequest {
	if o == nil {
		var ret ExpenseRequest
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *ExpenseEndpointRequest) GetModelOk() (*ExpenseRequest, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *ExpenseEndpointRequest) SetModel(v ExpenseRequest) {
	o.Model = v
}

func (o ExpenseEndpointRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["model"] = o.Model
	}
	return json.Marshal(toSerialize)
}

func (v *ExpenseEndpointRequest) UnmarshalJSON(src []byte) error {
    type ExpenseEndpointRequestUnmarshalTarget ExpenseEndpointRequest

	var intermediateResult ExpenseEndpointRequestUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = ExpenseEndpointRequest(intermediateResult)
	return nil
}
type NullableExpenseEndpointRequest struct {
	value *ExpenseEndpointRequest
	isSet bool
}

func (v NullableExpenseEndpointRequest) Get() *ExpenseEndpointRequest {
	return v.value
}

func (v *NullableExpenseEndpointRequest) Set(val *ExpenseEndpointRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableExpenseEndpointRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableExpenseEndpointRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpenseEndpointRequest(val *ExpenseEndpointRequest) *NullableExpenseEndpointRequest {
	return &NullableExpenseEndpointRequest{value: val, isSet: true}
}

func (v NullableExpenseEndpointRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpenseEndpointRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


