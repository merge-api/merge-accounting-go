/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_accounting_client

import (
	"encoding/json"
	"time"
)

// CashFlowStatement # The CashFlowStatement Object ### Description The `CashFlowStatement` object shows operating activities, investing activities, and financing activities over a period of time (month, quarter, or year).  ### Usage Example Fetch from the `LIST CashFlowStatements` endpoint and view a company's cash flow statements.
type CashFlowStatement struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId NullableString `json:"remote_id,omitempty"`
	RemoteData []RemoteData `json:"remote_data,omitempty"`
	// The cash flow statement's name.
	Name NullableString `json:"name,omitempty"`
	// The cash flow statement's currency.
	Currency NullableCurrencyEnum `json:"currency,omitempty"`
	// The company the cash flow statement belongs to.
	Company NullableString `json:"company,omitempty"`
	// The cash flow statement's start period.
	StartPeriod NullableTime `json:"start_period,omitempty"`
	// The cash flow statement's end period.
	EndPeriod NullableTime `json:"end_period,omitempty"`
	// Cash and cash equivalents at the beginning of the cash flow statement's period.
	CashAtBeginningOfPeriod NullableFloat32 `json:"cash_at_beginning_of_period,omitempty"`
	// Cash and cash equivalents at the beginning of the cash flow statement's period.
	CashAtEndOfPeriod NullableFloat32 `json:"cash_at_end_of_period,omitempty"`
	OperatingActivities *[]ReportItem `json:"operating_activities,omitempty"`
	InvestingActivities *[]ReportItem `json:"investing_activities,omitempty"`
	FinancingActivities *[]ReportItem `json:"financing_activities,omitempty"`
	// The time that cash flow statement was generated by the accounting system.
	RemoteGeneratedAt NullableTime `json:"remote_generated_at,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
	FieldMappings map[string]interface{} `json:"field_mappings,omitempty"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewCashFlowStatement instantiates a new CashFlowStatement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCashFlowStatement() *CashFlowStatement {
	this := CashFlowStatement{}
	return &this
}

// NewCashFlowStatementWithDefaults instantiates a new CashFlowStatement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCashFlowStatementWithDefaults() *CashFlowStatement {
	this := CashFlowStatement{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CashFlowStatement) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashFlowStatement) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CashFlowStatement) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CashFlowStatement) SetId(v string) {
	o.Id = &v
}

// GetRemoteId returns the RemoteId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CashFlowStatement) GetRemoteId() string {
	if o == nil || o.RemoteId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RemoteId.Get()
}

// GetRemoteIdOk returns a tuple with the RemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashFlowStatement) GetRemoteIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemoteId.Get(), o.RemoteId.IsSet()
}

// HasRemoteId returns a boolean if a field has been set.
func (o *CashFlowStatement) HasRemoteId() bool {
	if o != nil && o.RemoteId.IsSet() {
		return true
	}

	return false
}

// SetRemoteId gets a reference to the given NullableString and assigns it to the RemoteId field.
func (o *CashFlowStatement) SetRemoteId(v string) {
	o.RemoteId.Set(&v)
}
// SetRemoteIdNil sets the value for RemoteId to be an explicit nil
func (o *CashFlowStatement) SetRemoteIdNil() {
	o.RemoteId.Set(nil)
}

// UnsetRemoteId ensures that no value is present for RemoteId, not even an explicit nil
func (o *CashFlowStatement) UnsetRemoteId() {
	o.RemoteId.Unset()
}

// GetRemoteData returns the RemoteData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CashFlowStatement) GetRemoteData() []RemoteData {
	if o == nil  {
		var ret []RemoteData
		return ret
	}
	return o.RemoteData
}

// GetRemoteDataOk returns a tuple with the RemoteData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashFlowStatement) GetRemoteDataOk() (*[]RemoteData, bool) {
	if o == nil || o.RemoteData == nil {
		return nil, false
	}
	return &o.RemoteData, true
}

// HasRemoteData returns a boolean if a field has been set.
func (o *CashFlowStatement) HasRemoteData() bool {
	if o != nil && o.RemoteData != nil {
		return true
	}

	return false
}

// SetRemoteData gets a reference to the given []RemoteData and assigns it to the RemoteData field.
func (o *CashFlowStatement) SetRemoteData(v []RemoteData) {
	o.RemoteData = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CashFlowStatement) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashFlowStatement) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CashFlowStatement) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CashFlowStatement) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CashFlowStatement) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CashFlowStatement) UnsetName() {
	o.Name.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CashFlowStatement) GetCurrency() CurrencyEnum {
	if o == nil || o.Currency.Get() == nil {
		var ret CurrencyEnum
		return ret
	}
	return *o.Currency.Get()
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashFlowStatement) GetCurrencyOk() (*CurrencyEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Currency.Get(), o.Currency.IsSet()
}

// HasCurrency returns a boolean if a field has been set.
func (o *CashFlowStatement) HasCurrency() bool {
	if o != nil && o.Currency.IsSet() {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given NullableCurrencyEnum and assigns it to the Currency field.
func (o *CashFlowStatement) SetCurrency(v CurrencyEnum) {
	o.Currency.Set(&v)
}
// SetCurrencyNil sets the value for Currency to be an explicit nil
func (o *CashFlowStatement) SetCurrencyNil() {
	o.Currency.Set(nil)
}

// UnsetCurrency ensures that no value is present for Currency, not even an explicit nil
func (o *CashFlowStatement) UnsetCurrency() {
	o.Currency.Unset()
}

// GetCompany returns the Company field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CashFlowStatement) GetCompany() string {
	if o == nil || o.Company.Get() == nil {
		var ret string
		return ret
	}
	return *o.Company.Get()
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashFlowStatement) GetCompanyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Company.Get(), o.Company.IsSet()
}

// HasCompany returns a boolean if a field has been set.
func (o *CashFlowStatement) HasCompany() bool {
	if o != nil && o.Company.IsSet() {
		return true
	}

	return false
}

// SetCompany gets a reference to the given NullableString and assigns it to the Company field.
func (o *CashFlowStatement) SetCompany(v string) {
	o.Company.Set(&v)
}
// SetCompanyNil sets the value for Company to be an explicit nil
func (o *CashFlowStatement) SetCompanyNil() {
	o.Company.Set(nil)
}

// UnsetCompany ensures that no value is present for Company, not even an explicit nil
func (o *CashFlowStatement) UnsetCompany() {
	o.Company.Unset()
}

// GetStartPeriod returns the StartPeriod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CashFlowStatement) GetStartPeriod() time.Time {
	if o == nil || o.StartPeriod.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.StartPeriod.Get()
}

// GetStartPeriodOk returns a tuple with the StartPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashFlowStatement) GetStartPeriodOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartPeriod.Get(), o.StartPeriod.IsSet()
}

// HasStartPeriod returns a boolean if a field has been set.
func (o *CashFlowStatement) HasStartPeriod() bool {
	if o != nil && o.StartPeriod.IsSet() {
		return true
	}

	return false
}

// SetStartPeriod gets a reference to the given NullableTime and assigns it to the StartPeriod field.
func (o *CashFlowStatement) SetStartPeriod(v time.Time) {
	o.StartPeriod.Set(&v)
}
// SetStartPeriodNil sets the value for StartPeriod to be an explicit nil
func (o *CashFlowStatement) SetStartPeriodNil() {
	o.StartPeriod.Set(nil)
}

// UnsetStartPeriod ensures that no value is present for StartPeriod, not even an explicit nil
func (o *CashFlowStatement) UnsetStartPeriod() {
	o.StartPeriod.Unset()
}

// GetEndPeriod returns the EndPeriod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CashFlowStatement) GetEndPeriod() time.Time {
	if o == nil || o.EndPeriod.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.EndPeriod.Get()
}

// GetEndPeriodOk returns a tuple with the EndPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashFlowStatement) GetEndPeriodOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndPeriod.Get(), o.EndPeriod.IsSet()
}

// HasEndPeriod returns a boolean if a field has been set.
func (o *CashFlowStatement) HasEndPeriod() bool {
	if o != nil && o.EndPeriod.IsSet() {
		return true
	}

	return false
}

// SetEndPeriod gets a reference to the given NullableTime and assigns it to the EndPeriod field.
func (o *CashFlowStatement) SetEndPeriod(v time.Time) {
	o.EndPeriod.Set(&v)
}
// SetEndPeriodNil sets the value for EndPeriod to be an explicit nil
func (o *CashFlowStatement) SetEndPeriodNil() {
	o.EndPeriod.Set(nil)
}

// UnsetEndPeriod ensures that no value is present for EndPeriod, not even an explicit nil
func (o *CashFlowStatement) UnsetEndPeriod() {
	o.EndPeriod.Unset()
}

// GetCashAtBeginningOfPeriod returns the CashAtBeginningOfPeriod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CashFlowStatement) GetCashAtBeginningOfPeriod() float32 {
	if o == nil || o.CashAtBeginningOfPeriod.Get() == nil {
		var ret float32
		return ret
	}
	return *o.CashAtBeginningOfPeriod.Get()
}

// GetCashAtBeginningOfPeriodOk returns a tuple with the CashAtBeginningOfPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashFlowStatement) GetCashAtBeginningOfPeriodOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CashAtBeginningOfPeriod.Get(), o.CashAtBeginningOfPeriod.IsSet()
}

// HasCashAtBeginningOfPeriod returns a boolean if a field has been set.
func (o *CashFlowStatement) HasCashAtBeginningOfPeriod() bool {
	if o != nil && o.CashAtBeginningOfPeriod.IsSet() {
		return true
	}

	return false
}

// SetCashAtBeginningOfPeriod gets a reference to the given NullableFloat32 and assigns it to the CashAtBeginningOfPeriod field.
func (o *CashFlowStatement) SetCashAtBeginningOfPeriod(v float32) {
	o.CashAtBeginningOfPeriod.Set(&v)
}
// SetCashAtBeginningOfPeriodNil sets the value for CashAtBeginningOfPeriod to be an explicit nil
func (o *CashFlowStatement) SetCashAtBeginningOfPeriodNil() {
	o.CashAtBeginningOfPeriod.Set(nil)
}

// UnsetCashAtBeginningOfPeriod ensures that no value is present for CashAtBeginningOfPeriod, not even an explicit nil
func (o *CashFlowStatement) UnsetCashAtBeginningOfPeriod() {
	o.CashAtBeginningOfPeriod.Unset()
}

// GetCashAtEndOfPeriod returns the CashAtEndOfPeriod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CashFlowStatement) GetCashAtEndOfPeriod() float32 {
	if o == nil || o.CashAtEndOfPeriod.Get() == nil {
		var ret float32
		return ret
	}
	return *o.CashAtEndOfPeriod.Get()
}

// GetCashAtEndOfPeriodOk returns a tuple with the CashAtEndOfPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashFlowStatement) GetCashAtEndOfPeriodOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CashAtEndOfPeriod.Get(), o.CashAtEndOfPeriod.IsSet()
}

// HasCashAtEndOfPeriod returns a boolean if a field has been set.
func (o *CashFlowStatement) HasCashAtEndOfPeriod() bool {
	if o != nil && o.CashAtEndOfPeriod.IsSet() {
		return true
	}

	return false
}

// SetCashAtEndOfPeriod gets a reference to the given NullableFloat32 and assigns it to the CashAtEndOfPeriod field.
func (o *CashFlowStatement) SetCashAtEndOfPeriod(v float32) {
	o.CashAtEndOfPeriod.Set(&v)
}
// SetCashAtEndOfPeriodNil sets the value for CashAtEndOfPeriod to be an explicit nil
func (o *CashFlowStatement) SetCashAtEndOfPeriodNil() {
	o.CashAtEndOfPeriod.Set(nil)
}

// UnsetCashAtEndOfPeriod ensures that no value is present for CashAtEndOfPeriod, not even an explicit nil
func (o *CashFlowStatement) UnsetCashAtEndOfPeriod() {
	o.CashAtEndOfPeriod.Unset()
}

// GetOperatingActivities returns the OperatingActivities field value if set, zero value otherwise.
func (o *CashFlowStatement) GetOperatingActivities() []ReportItem {
	if o == nil || o.OperatingActivities == nil {
		var ret []ReportItem
		return ret
	}
	return *o.OperatingActivities
}

// GetOperatingActivitiesOk returns a tuple with the OperatingActivities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashFlowStatement) GetOperatingActivitiesOk() (*[]ReportItem, bool) {
	if o == nil || o.OperatingActivities == nil {
		return nil, false
	}
	return o.OperatingActivities, true
}

// HasOperatingActivities returns a boolean if a field has been set.
func (o *CashFlowStatement) HasOperatingActivities() bool {
	if o != nil && o.OperatingActivities != nil {
		return true
	}

	return false
}

// SetOperatingActivities gets a reference to the given []ReportItem and assigns it to the OperatingActivities field.
func (o *CashFlowStatement) SetOperatingActivities(v []ReportItem) {
	o.OperatingActivities = &v
}

// GetInvestingActivities returns the InvestingActivities field value if set, zero value otherwise.
func (o *CashFlowStatement) GetInvestingActivities() []ReportItem {
	if o == nil || o.InvestingActivities == nil {
		var ret []ReportItem
		return ret
	}
	return *o.InvestingActivities
}

// GetInvestingActivitiesOk returns a tuple with the InvestingActivities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashFlowStatement) GetInvestingActivitiesOk() (*[]ReportItem, bool) {
	if o == nil || o.InvestingActivities == nil {
		return nil, false
	}
	return o.InvestingActivities, true
}

// HasInvestingActivities returns a boolean if a field has been set.
func (o *CashFlowStatement) HasInvestingActivities() bool {
	if o != nil && o.InvestingActivities != nil {
		return true
	}

	return false
}

// SetInvestingActivities gets a reference to the given []ReportItem and assigns it to the InvestingActivities field.
func (o *CashFlowStatement) SetInvestingActivities(v []ReportItem) {
	o.InvestingActivities = &v
}

// GetFinancingActivities returns the FinancingActivities field value if set, zero value otherwise.
func (o *CashFlowStatement) GetFinancingActivities() []ReportItem {
	if o == nil || o.FinancingActivities == nil {
		var ret []ReportItem
		return ret
	}
	return *o.FinancingActivities
}

// GetFinancingActivitiesOk returns a tuple with the FinancingActivities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashFlowStatement) GetFinancingActivitiesOk() (*[]ReportItem, bool) {
	if o == nil || o.FinancingActivities == nil {
		return nil, false
	}
	return o.FinancingActivities, true
}

// HasFinancingActivities returns a boolean if a field has been set.
func (o *CashFlowStatement) HasFinancingActivities() bool {
	if o != nil && o.FinancingActivities != nil {
		return true
	}

	return false
}

// SetFinancingActivities gets a reference to the given []ReportItem and assigns it to the FinancingActivities field.
func (o *CashFlowStatement) SetFinancingActivities(v []ReportItem) {
	o.FinancingActivities = &v
}

// GetRemoteGeneratedAt returns the RemoteGeneratedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CashFlowStatement) GetRemoteGeneratedAt() time.Time {
	if o == nil || o.RemoteGeneratedAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.RemoteGeneratedAt.Get()
}

// GetRemoteGeneratedAtOk returns a tuple with the RemoteGeneratedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashFlowStatement) GetRemoteGeneratedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemoteGeneratedAt.Get(), o.RemoteGeneratedAt.IsSet()
}

// HasRemoteGeneratedAt returns a boolean if a field has been set.
func (o *CashFlowStatement) HasRemoteGeneratedAt() bool {
	if o != nil && o.RemoteGeneratedAt.IsSet() {
		return true
	}

	return false
}

// SetRemoteGeneratedAt gets a reference to the given NullableTime and assigns it to the RemoteGeneratedAt field.
func (o *CashFlowStatement) SetRemoteGeneratedAt(v time.Time) {
	o.RemoteGeneratedAt.Set(&v)
}
// SetRemoteGeneratedAtNil sets the value for RemoteGeneratedAt to be an explicit nil
func (o *CashFlowStatement) SetRemoteGeneratedAtNil() {
	o.RemoteGeneratedAt.Set(nil)
}

// UnsetRemoteGeneratedAt ensures that no value is present for RemoteGeneratedAt, not even an explicit nil
func (o *CashFlowStatement) UnsetRemoteGeneratedAt() {
	o.RemoteGeneratedAt.Unset()
}

// GetRemoteWasDeleted returns the RemoteWasDeleted field value if set, zero value otherwise.
func (o *CashFlowStatement) GetRemoteWasDeleted() bool {
	if o == nil || o.RemoteWasDeleted == nil {
		var ret bool
		return ret
	}
	return *o.RemoteWasDeleted
}

// GetRemoteWasDeletedOk returns a tuple with the RemoteWasDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashFlowStatement) GetRemoteWasDeletedOk() (*bool, bool) {
	if o == nil || o.RemoteWasDeleted == nil {
		return nil, false
	}
	return o.RemoteWasDeleted, true
}

// HasRemoteWasDeleted returns a boolean if a field has been set.
func (o *CashFlowStatement) HasRemoteWasDeleted() bool {
	if o != nil && o.RemoteWasDeleted != nil {
		return true
	}

	return false
}

// SetRemoteWasDeleted gets a reference to the given bool and assigns it to the RemoteWasDeleted field.
func (o *CashFlowStatement) SetRemoteWasDeleted(v bool) {
	o.RemoteWasDeleted = &v
}

// GetFieldMappings returns the FieldMappings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CashFlowStatement) GetFieldMappings() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.FieldMappings
}

// GetFieldMappingsOk returns a tuple with the FieldMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashFlowStatement) GetFieldMappingsOk() (*map[string]interface{}, bool) {
	if o == nil || o.FieldMappings == nil {
		return nil, false
	}
	return &o.FieldMappings, true
}

// HasFieldMappings returns a boolean if a field has been set.
func (o *CashFlowStatement) HasFieldMappings() bool {
	if o != nil && o.FieldMappings != nil {
		return true
	}

	return false
}

// SetFieldMappings gets a reference to the given map[string]interface{} and assigns it to the FieldMappings field.
func (o *CashFlowStatement) SetFieldMappings(v map[string]interface{}) {
	o.FieldMappings = v
}

func (o CashFlowStatement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.RemoteId.IsSet() {
		toSerialize["remote_id"] = o.RemoteId.Get()
	}
	if o.RemoteData != nil {
		toSerialize["remote_data"] = o.RemoteData
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Currency.IsSet() {
		toSerialize["currency"] = o.Currency.Get()
	}
	if o.Company.IsSet() {
		toSerialize["company"] = o.Company.Get()
	}
	if o.StartPeriod.IsSet() {
		toSerialize["start_period"] = o.StartPeriod.Get()
	}
	if o.EndPeriod.IsSet() {
		toSerialize["end_period"] = o.EndPeriod.Get()
	}
	if o.CashAtBeginningOfPeriod.IsSet() {
		toSerialize["cash_at_beginning_of_period"] = o.CashAtBeginningOfPeriod.Get()
	}
	if o.CashAtEndOfPeriod.IsSet() {
		toSerialize["cash_at_end_of_period"] = o.CashAtEndOfPeriod.Get()
	}
	if o.OperatingActivities != nil {
		toSerialize["operating_activities"] = o.OperatingActivities
	}
	if o.InvestingActivities != nil {
		toSerialize["investing_activities"] = o.InvestingActivities
	}
	if o.FinancingActivities != nil {
		toSerialize["financing_activities"] = o.FinancingActivities
	}
	if o.RemoteGeneratedAt.IsSet() {
		toSerialize["remote_generated_at"] = o.RemoteGeneratedAt.Get()
	}
	if o.RemoteWasDeleted != nil {
		toSerialize["remote_was_deleted"] = o.RemoteWasDeleted
	}
	if o.FieldMappings != nil {
		toSerialize["field_mappings"] = o.FieldMappings
	}
	return json.Marshal(toSerialize)
}

func (v *CashFlowStatement) UnmarshalJSON(src []byte) error {
    type CashFlowStatementUnmarshalTarget CashFlowStatement

	var intermediateResult CashFlowStatementUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = CashFlowStatement(intermediateResult)
	return nil
}
type NullableCashFlowStatement struct {
	value *CashFlowStatement
	isSet bool
}

func (v NullableCashFlowStatement) Get() *CashFlowStatement {
	return v.value
}

func (v *NullableCashFlowStatement) Set(val *CashFlowStatement) {
	v.value = val
	v.isSet = true
}

func (v NullableCashFlowStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableCashFlowStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashFlowStatement(val *CashFlowStatement) *NullableCashFlowStatement {
	return &NullableCashFlowStatement{value: val, isSet: true}
}

func (v NullableCashFlowStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashFlowStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


