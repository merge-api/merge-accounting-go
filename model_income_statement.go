/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_accounting_client

import (
	"encoding/json"
	"time"
)

// IncomeStatement # The IncomeStatement Object ### Description The `IncomeStatement` object is used to represent a companyâ€™s income, the cost of sales, operating expenses, and other non-operating expenses. The object also includes other important values like gross profit, gross operating profit, and net income. This represents a period of time (month, quarter, or year).  ### Usage Example Fetch from the `GET IncomeStatement` endpoint and view a company's income statement for a given period.
type IncomeStatement struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId NullableString `json:"remote_id,omitempty"`
	RemoteData []RemoteData `json:"remote_data,omitempty"`
	// The income statement's name.
	Name NullableString `json:"name,omitempty"`
	// The income statement's currency.
	Currency NullableCurrencyEnum `json:"currency,omitempty"`
	// The company the income statement belongs to.
	Company NullableString `json:"company,omitempty"`
	// The income statement's start period.
	StartPeriod NullableTime `json:"start_period,omitempty"`
	// The income statement's end period.
	EndPeriod NullableTime `json:"end_period,omitempty"`
	Income *[]ReportItem `json:"income,omitempty"`
	CostOfSales *[]ReportItem `json:"cost_of_sales,omitempty"`
	// The revenue minus the cost of sale.
	GrossProfit NullableFloat32 `json:"gross_profit,omitempty"`
	OperatingExpenses *[]ReportItem `json:"operating_expenses,omitempty"`
	// The revenue minus the operating expenses.
	NetOperatingIncome NullableFloat32 `json:"net_operating_income,omitempty"`
	NonOperatingExpenses *[]ReportItem `json:"non_operating_expenses,omitempty"`
	// The gross profit minus the total expenses.
	NetIncome NullableFloat32 `json:"net_income,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
	FieldMappings map[string]interface{} `json:"field_mappings,omitempty"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewIncomeStatement instantiates a new IncomeStatement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncomeStatement() *IncomeStatement {
	this := IncomeStatement{}
	return &this
}

// NewIncomeStatementWithDefaults instantiates a new IncomeStatement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncomeStatementWithDefaults() *IncomeStatement {
	this := IncomeStatement{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IncomeStatement) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IncomeStatement) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IncomeStatement) SetId(v string) {
	o.Id = &v
}

// GetRemoteId returns the RemoteId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetRemoteId() string {
	if o == nil || o.RemoteId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RemoteId.Get()
}

// GetRemoteIdOk returns a tuple with the RemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetRemoteIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemoteId.Get(), o.RemoteId.IsSet()
}

// HasRemoteId returns a boolean if a field has been set.
func (o *IncomeStatement) HasRemoteId() bool {
	if o != nil && o.RemoteId.IsSet() {
		return true
	}

	return false
}

// SetRemoteId gets a reference to the given NullableString and assigns it to the RemoteId field.
func (o *IncomeStatement) SetRemoteId(v string) {
	o.RemoteId.Set(&v)
}
// SetRemoteIdNil sets the value for RemoteId to be an explicit nil
func (o *IncomeStatement) SetRemoteIdNil() {
	o.RemoteId.Set(nil)
}

// UnsetRemoteId ensures that no value is present for RemoteId, not even an explicit nil
func (o *IncomeStatement) UnsetRemoteId() {
	o.RemoteId.Unset()
}

// GetRemoteData returns the RemoteData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetRemoteData() []RemoteData {
	if o == nil  {
		var ret []RemoteData
		return ret
	}
	return o.RemoteData
}

// GetRemoteDataOk returns a tuple with the RemoteData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetRemoteDataOk() (*[]RemoteData, bool) {
	if o == nil || o.RemoteData == nil {
		return nil, false
	}
	return &o.RemoteData, true
}

// HasRemoteData returns a boolean if a field has been set.
func (o *IncomeStatement) HasRemoteData() bool {
	if o != nil && o.RemoteData != nil {
		return true
	}

	return false
}

// SetRemoteData gets a reference to the given []RemoteData and assigns it to the RemoteData field.
func (o *IncomeStatement) SetRemoteData(v []RemoteData) {
	o.RemoteData = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *IncomeStatement) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *IncomeStatement) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *IncomeStatement) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *IncomeStatement) UnsetName() {
	o.Name.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetCurrency() CurrencyEnum {
	if o == nil || o.Currency.Get() == nil {
		var ret CurrencyEnum
		return ret
	}
	return *o.Currency.Get()
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetCurrencyOk() (*CurrencyEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Currency.Get(), o.Currency.IsSet()
}

// HasCurrency returns a boolean if a field has been set.
func (o *IncomeStatement) HasCurrency() bool {
	if o != nil && o.Currency.IsSet() {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given NullableCurrencyEnum and assigns it to the Currency field.
func (o *IncomeStatement) SetCurrency(v CurrencyEnum) {
	o.Currency.Set(&v)
}
// SetCurrencyNil sets the value for Currency to be an explicit nil
func (o *IncomeStatement) SetCurrencyNil() {
	o.Currency.Set(nil)
}

// UnsetCurrency ensures that no value is present for Currency, not even an explicit nil
func (o *IncomeStatement) UnsetCurrency() {
	o.Currency.Unset()
}

// GetCompany returns the Company field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetCompany() string {
	if o == nil || o.Company.Get() == nil {
		var ret string
		return ret
	}
	return *o.Company.Get()
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetCompanyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Company.Get(), o.Company.IsSet()
}

// HasCompany returns a boolean if a field has been set.
func (o *IncomeStatement) HasCompany() bool {
	if o != nil && o.Company.IsSet() {
		return true
	}

	return false
}

// SetCompany gets a reference to the given NullableString and assigns it to the Company field.
func (o *IncomeStatement) SetCompany(v string) {
	o.Company.Set(&v)
}
// SetCompanyNil sets the value for Company to be an explicit nil
func (o *IncomeStatement) SetCompanyNil() {
	o.Company.Set(nil)
}

// UnsetCompany ensures that no value is present for Company, not even an explicit nil
func (o *IncomeStatement) UnsetCompany() {
	o.Company.Unset()
}

// GetStartPeriod returns the StartPeriod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetStartPeriod() time.Time {
	if o == nil || o.StartPeriod.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.StartPeriod.Get()
}

// GetStartPeriodOk returns a tuple with the StartPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetStartPeriodOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartPeriod.Get(), o.StartPeriod.IsSet()
}

// HasStartPeriod returns a boolean if a field has been set.
func (o *IncomeStatement) HasStartPeriod() bool {
	if o != nil && o.StartPeriod.IsSet() {
		return true
	}

	return false
}

// SetStartPeriod gets a reference to the given NullableTime and assigns it to the StartPeriod field.
func (o *IncomeStatement) SetStartPeriod(v time.Time) {
	o.StartPeriod.Set(&v)
}
// SetStartPeriodNil sets the value for StartPeriod to be an explicit nil
func (o *IncomeStatement) SetStartPeriodNil() {
	o.StartPeriod.Set(nil)
}

// UnsetStartPeriod ensures that no value is present for StartPeriod, not even an explicit nil
func (o *IncomeStatement) UnsetStartPeriod() {
	o.StartPeriod.Unset()
}

// GetEndPeriod returns the EndPeriod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetEndPeriod() time.Time {
	if o == nil || o.EndPeriod.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.EndPeriod.Get()
}

// GetEndPeriodOk returns a tuple with the EndPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetEndPeriodOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndPeriod.Get(), o.EndPeriod.IsSet()
}

// HasEndPeriod returns a boolean if a field has been set.
func (o *IncomeStatement) HasEndPeriod() bool {
	if o != nil && o.EndPeriod.IsSet() {
		return true
	}

	return false
}

// SetEndPeriod gets a reference to the given NullableTime and assigns it to the EndPeriod field.
func (o *IncomeStatement) SetEndPeriod(v time.Time) {
	o.EndPeriod.Set(&v)
}
// SetEndPeriodNil sets the value for EndPeriod to be an explicit nil
func (o *IncomeStatement) SetEndPeriodNil() {
	o.EndPeriod.Set(nil)
}

// UnsetEndPeriod ensures that no value is present for EndPeriod, not even an explicit nil
func (o *IncomeStatement) UnsetEndPeriod() {
	o.EndPeriod.Unset()
}

// GetIncome returns the Income field value if set, zero value otherwise.
func (o *IncomeStatement) GetIncome() []ReportItem {
	if o == nil || o.Income == nil {
		var ret []ReportItem
		return ret
	}
	return *o.Income
}

// GetIncomeOk returns a tuple with the Income field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetIncomeOk() (*[]ReportItem, bool) {
	if o == nil || o.Income == nil {
		return nil, false
	}
	return o.Income, true
}

// HasIncome returns a boolean if a field has been set.
func (o *IncomeStatement) HasIncome() bool {
	if o != nil && o.Income != nil {
		return true
	}

	return false
}

// SetIncome gets a reference to the given []ReportItem and assigns it to the Income field.
func (o *IncomeStatement) SetIncome(v []ReportItem) {
	o.Income = &v
}

// GetCostOfSales returns the CostOfSales field value if set, zero value otherwise.
func (o *IncomeStatement) GetCostOfSales() []ReportItem {
	if o == nil || o.CostOfSales == nil {
		var ret []ReportItem
		return ret
	}
	return *o.CostOfSales
}

// GetCostOfSalesOk returns a tuple with the CostOfSales field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetCostOfSalesOk() (*[]ReportItem, bool) {
	if o == nil || o.CostOfSales == nil {
		return nil, false
	}
	return o.CostOfSales, true
}

// HasCostOfSales returns a boolean if a field has been set.
func (o *IncomeStatement) HasCostOfSales() bool {
	if o != nil && o.CostOfSales != nil {
		return true
	}

	return false
}

// SetCostOfSales gets a reference to the given []ReportItem and assigns it to the CostOfSales field.
func (o *IncomeStatement) SetCostOfSales(v []ReportItem) {
	o.CostOfSales = &v
}

// GetGrossProfit returns the GrossProfit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetGrossProfit() float32 {
	if o == nil || o.GrossProfit.Get() == nil {
		var ret float32
		return ret
	}
	return *o.GrossProfit.Get()
}

// GetGrossProfitOk returns a tuple with the GrossProfit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetGrossProfitOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GrossProfit.Get(), o.GrossProfit.IsSet()
}

// HasGrossProfit returns a boolean if a field has been set.
func (o *IncomeStatement) HasGrossProfit() bool {
	if o != nil && o.GrossProfit.IsSet() {
		return true
	}

	return false
}

// SetGrossProfit gets a reference to the given NullableFloat32 and assigns it to the GrossProfit field.
func (o *IncomeStatement) SetGrossProfit(v float32) {
	o.GrossProfit.Set(&v)
}
// SetGrossProfitNil sets the value for GrossProfit to be an explicit nil
func (o *IncomeStatement) SetGrossProfitNil() {
	o.GrossProfit.Set(nil)
}

// UnsetGrossProfit ensures that no value is present for GrossProfit, not even an explicit nil
func (o *IncomeStatement) UnsetGrossProfit() {
	o.GrossProfit.Unset()
}

// GetOperatingExpenses returns the OperatingExpenses field value if set, zero value otherwise.
func (o *IncomeStatement) GetOperatingExpenses() []ReportItem {
	if o == nil || o.OperatingExpenses == nil {
		var ret []ReportItem
		return ret
	}
	return *o.OperatingExpenses
}

// GetOperatingExpensesOk returns a tuple with the OperatingExpenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetOperatingExpensesOk() (*[]ReportItem, bool) {
	if o == nil || o.OperatingExpenses == nil {
		return nil, false
	}
	return o.OperatingExpenses, true
}

// HasOperatingExpenses returns a boolean if a field has been set.
func (o *IncomeStatement) HasOperatingExpenses() bool {
	if o != nil && o.OperatingExpenses != nil {
		return true
	}

	return false
}

// SetOperatingExpenses gets a reference to the given []ReportItem and assigns it to the OperatingExpenses field.
func (o *IncomeStatement) SetOperatingExpenses(v []ReportItem) {
	o.OperatingExpenses = &v
}

// GetNetOperatingIncome returns the NetOperatingIncome field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetNetOperatingIncome() float32 {
	if o == nil || o.NetOperatingIncome.Get() == nil {
		var ret float32
		return ret
	}
	return *o.NetOperatingIncome.Get()
}

// GetNetOperatingIncomeOk returns a tuple with the NetOperatingIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetNetOperatingIncomeOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NetOperatingIncome.Get(), o.NetOperatingIncome.IsSet()
}

// HasNetOperatingIncome returns a boolean if a field has been set.
func (o *IncomeStatement) HasNetOperatingIncome() bool {
	if o != nil && o.NetOperatingIncome.IsSet() {
		return true
	}

	return false
}

// SetNetOperatingIncome gets a reference to the given NullableFloat32 and assigns it to the NetOperatingIncome field.
func (o *IncomeStatement) SetNetOperatingIncome(v float32) {
	o.NetOperatingIncome.Set(&v)
}
// SetNetOperatingIncomeNil sets the value for NetOperatingIncome to be an explicit nil
func (o *IncomeStatement) SetNetOperatingIncomeNil() {
	o.NetOperatingIncome.Set(nil)
}

// UnsetNetOperatingIncome ensures that no value is present for NetOperatingIncome, not even an explicit nil
func (o *IncomeStatement) UnsetNetOperatingIncome() {
	o.NetOperatingIncome.Unset()
}

// GetNonOperatingExpenses returns the NonOperatingExpenses field value if set, zero value otherwise.
func (o *IncomeStatement) GetNonOperatingExpenses() []ReportItem {
	if o == nil || o.NonOperatingExpenses == nil {
		var ret []ReportItem
		return ret
	}
	return *o.NonOperatingExpenses
}

// GetNonOperatingExpensesOk returns a tuple with the NonOperatingExpenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetNonOperatingExpensesOk() (*[]ReportItem, bool) {
	if o == nil || o.NonOperatingExpenses == nil {
		return nil, false
	}
	return o.NonOperatingExpenses, true
}

// HasNonOperatingExpenses returns a boolean if a field has been set.
func (o *IncomeStatement) HasNonOperatingExpenses() bool {
	if o != nil && o.NonOperatingExpenses != nil {
		return true
	}

	return false
}

// SetNonOperatingExpenses gets a reference to the given []ReportItem and assigns it to the NonOperatingExpenses field.
func (o *IncomeStatement) SetNonOperatingExpenses(v []ReportItem) {
	o.NonOperatingExpenses = &v
}

// GetNetIncome returns the NetIncome field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetNetIncome() float32 {
	if o == nil || o.NetIncome.Get() == nil {
		var ret float32
		return ret
	}
	return *o.NetIncome.Get()
}

// GetNetIncomeOk returns a tuple with the NetIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetNetIncomeOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NetIncome.Get(), o.NetIncome.IsSet()
}

// HasNetIncome returns a boolean if a field has been set.
func (o *IncomeStatement) HasNetIncome() bool {
	if o != nil && o.NetIncome.IsSet() {
		return true
	}

	return false
}

// SetNetIncome gets a reference to the given NullableFloat32 and assigns it to the NetIncome field.
func (o *IncomeStatement) SetNetIncome(v float32) {
	o.NetIncome.Set(&v)
}
// SetNetIncomeNil sets the value for NetIncome to be an explicit nil
func (o *IncomeStatement) SetNetIncomeNil() {
	o.NetIncome.Set(nil)
}

// UnsetNetIncome ensures that no value is present for NetIncome, not even an explicit nil
func (o *IncomeStatement) UnsetNetIncome() {
	o.NetIncome.Unset()
}

// GetRemoteWasDeleted returns the RemoteWasDeleted field value if set, zero value otherwise.
func (o *IncomeStatement) GetRemoteWasDeleted() bool {
	if o == nil || o.RemoteWasDeleted == nil {
		var ret bool
		return ret
	}
	return *o.RemoteWasDeleted
}

// GetRemoteWasDeletedOk returns a tuple with the RemoteWasDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetRemoteWasDeletedOk() (*bool, bool) {
	if o == nil || o.RemoteWasDeleted == nil {
		return nil, false
	}
	return o.RemoteWasDeleted, true
}

// HasRemoteWasDeleted returns a boolean if a field has been set.
func (o *IncomeStatement) HasRemoteWasDeleted() bool {
	if o != nil && o.RemoteWasDeleted != nil {
		return true
	}

	return false
}

// SetRemoteWasDeleted gets a reference to the given bool and assigns it to the RemoteWasDeleted field.
func (o *IncomeStatement) SetRemoteWasDeleted(v bool) {
	o.RemoteWasDeleted = &v
}

// GetFieldMappings returns the FieldMappings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetFieldMappings() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.FieldMappings
}

// GetFieldMappingsOk returns a tuple with the FieldMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetFieldMappingsOk() (*map[string]interface{}, bool) {
	if o == nil || o.FieldMappings == nil {
		return nil, false
	}
	return &o.FieldMappings, true
}

// HasFieldMappings returns a boolean if a field has been set.
func (o *IncomeStatement) HasFieldMappings() bool {
	if o != nil && o.FieldMappings != nil {
		return true
	}

	return false
}

// SetFieldMappings gets a reference to the given map[string]interface{} and assigns it to the FieldMappings field.
func (o *IncomeStatement) SetFieldMappings(v map[string]interface{}) {
	o.FieldMappings = v
}

func (o IncomeStatement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.RemoteId.IsSet() {
		toSerialize["remote_id"] = o.RemoteId.Get()
	}
	if o.RemoteData != nil {
		toSerialize["remote_data"] = o.RemoteData
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Currency.IsSet() {
		toSerialize["currency"] = o.Currency.Get()
	}
	if o.Company.IsSet() {
		toSerialize["company"] = o.Company.Get()
	}
	if o.StartPeriod.IsSet() {
		toSerialize["start_period"] = o.StartPeriod.Get()
	}
	if o.EndPeriod.IsSet() {
		toSerialize["end_period"] = o.EndPeriod.Get()
	}
	if o.Income != nil {
		toSerialize["income"] = o.Income
	}
	if o.CostOfSales != nil {
		toSerialize["cost_of_sales"] = o.CostOfSales
	}
	if o.GrossProfit.IsSet() {
		toSerialize["gross_profit"] = o.GrossProfit.Get()
	}
	if o.OperatingExpenses != nil {
		toSerialize["operating_expenses"] = o.OperatingExpenses
	}
	if o.NetOperatingIncome.IsSet() {
		toSerialize["net_operating_income"] = o.NetOperatingIncome.Get()
	}
	if o.NonOperatingExpenses != nil {
		toSerialize["non_operating_expenses"] = o.NonOperatingExpenses
	}
	if o.NetIncome.IsSet() {
		toSerialize["net_income"] = o.NetIncome.Get()
	}
	if o.RemoteWasDeleted != nil {
		toSerialize["remote_was_deleted"] = o.RemoteWasDeleted
	}
	if o.FieldMappings != nil {
		toSerialize["field_mappings"] = o.FieldMappings
	}
	return json.Marshal(toSerialize)
}

func (v *IncomeStatement) UnmarshalJSON(src []byte) error {
    type IncomeStatementUnmarshalTarget IncomeStatement

	var intermediateResult IncomeStatementUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = IncomeStatement(intermediateResult)
	return nil
}
type NullableIncomeStatement struct {
	value *IncomeStatement
	isSet bool
}

func (v NullableIncomeStatement) Get() *IncomeStatement {
	return v.value
}

func (v *NullableIncomeStatement) Set(val *IncomeStatement) {
	v.value = val
	v.isSet = true
}

func (v NullableIncomeStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableIncomeStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncomeStatement(val *IncomeStatement) *NullableIncomeStatement {
	return &NullableIncomeStatement{value: val, isSet: true}
}

func (v NullableIncomeStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncomeStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


