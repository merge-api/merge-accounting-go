/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_accounting_client

import (
	"encoding/json"
	"fmt"
)

// AddressTypeEnum the model 'AddressTypeEnum'
type AddressTypeEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of AddressTypeEnum
const (
    ADDRESSTYPEENUM_MERGE_NONSTANDARD_VALUE AddressTypeEnum = "MERGE_NONSTANDARD_VALUE"
    
	ADDRESSTYPEENUM_BILLING AddressTypeEnum = "BILLING"
	ADDRESSTYPEENUM_SHIPPING AddressTypeEnum = "SHIPPING"
)

var allowedAddressTypeEnumEnumValues = []AddressTypeEnum{
	"BILLING",
	"SHIPPING",
}

func (v *AddressTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AddressTypeEnum(value)
	for _, existing := range allowedAddressTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = ADDRESSTYPEENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewAddressTypeEnumFromValue returns a pointer to a valid AddressTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddressTypeEnumFromValue(v string) (*AddressTypeEnum, error) {
	ev := AddressTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := ADDRESSTYPEENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddressTypeEnum) IsValid() bool {
	for _, existing := range allowedAddressTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AddressTypeEnum value
func (v AddressTypeEnum) Ptr() *AddressTypeEnum {
	return &v
}

type NullableAddressTypeEnum struct {
	value *AddressTypeEnum
	isSet bool
}

func (v NullableAddressTypeEnum) Get() *AddressTypeEnum {
	return v.value
}

func (v *NullableAddressTypeEnum) Set(val *AddressTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressTypeEnum(val *AddressTypeEnum) *NullableAddressTypeEnum {
	return &NullableAddressTypeEnum{value: val, isSet: true}
}

func (v NullableAddressTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

