/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_accounting_client

import (
	"encoding/json"
)

// ReportItem # The ReportItem Object ### Description The `ReportItem` object is used to represent a report item for a Balance Sheet, Cash Flow Statement or Profit and Loss Report.  ### Usage Example Fetch from the `GET BalanceSheet` endpoint and view the balance sheet's report items.
type ReportItem struct {
	// The third-party API ID of the matching object.
	RemoteId NullableString `json:"remote_id,omitempty"`
	// The report item's name.
	Name NullableString `json:"name,omitempty"`
	// The report item's value.
	Value NullableFloat32 `json:"value,omitempty"`
	SubItems *map[string]interface{} `json:"sub_items,omitempty"`
	// The company the report item belongs to.
	Company NullableString `json:"company,omitempty"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewReportItem instantiates a new ReportItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportItem() *ReportItem {
	this := ReportItem{}
	return &this
}

// NewReportItemWithDefaults instantiates a new ReportItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportItemWithDefaults() *ReportItem {
	this := ReportItem{}
	return &this
}

// GetRemoteId returns the RemoteId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReportItem) GetRemoteId() string {
	if o == nil || o.RemoteId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RemoteId.Get()
}

// GetRemoteIdOk returns a tuple with the RemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReportItem) GetRemoteIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemoteId.Get(), o.RemoteId.IsSet()
}

// HasRemoteId returns a boolean if a field has been set.
func (o *ReportItem) HasRemoteId() bool {
	if o != nil && o.RemoteId.IsSet() {
		return true
	}

	return false
}

// SetRemoteId gets a reference to the given NullableString and assigns it to the RemoteId field.
func (o *ReportItem) SetRemoteId(v string) {
	o.RemoteId.Set(&v)
}
// SetRemoteIdNil sets the value for RemoteId to be an explicit nil
func (o *ReportItem) SetRemoteIdNil() {
	o.RemoteId.Set(nil)
}

// UnsetRemoteId ensures that no value is present for RemoteId, not even an explicit nil
func (o *ReportItem) UnsetRemoteId() {
	o.RemoteId.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReportItem) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReportItem) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ReportItem) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ReportItem) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ReportItem) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ReportItem) UnsetName() {
	o.Name.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReportItem) GetValue() float32 {
	if o == nil || o.Value.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReportItem) GetValueOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *ReportItem) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableFloat32 and assigns it to the Value field.
func (o *ReportItem) SetValue(v float32) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *ReportItem) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *ReportItem) UnsetValue() {
	o.Value.Unset()
}

// GetSubItems returns the SubItems field value if set, zero value otherwise.
func (o *ReportItem) GetSubItems() map[string]interface{} {
	if o == nil || o.SubItems == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SubItems
}

// GetSubItemsOk returns a tuple with the SubItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportItem) GetSubItemsOk() (*map[string]interface{}, bool) {
	if o == nil || o.SubItems == nil {
		return nil, false
	}
	return o.SubItems, true
}

// HasSubItems returns a boolean if a field has been set.
func (o *ReportItem) HasSubItems() bool {
	if o != nil && o.SubItems != nil {
		return true
	}

	return false
}

// SetSubItems gets a reference to the given map[string]interface{} and assigns it to the SubItems field.
func (o *ReportItem) SetSubItems(v map[string]interface{}) {
	o.SubItems = &v
}

// GetCompany returns the Company field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReportItem) GetCompany() string {
	if o == nil || o.Company.Get() == nil {
		var ret string
		return ret
	}
	return *o.Company.Get()
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReportItem) GetCompanyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Company.Get(), o.Company.IsSet()
}

// HasCompany returns a boolean if a field has been set.
func (o *ReportItem) HasCompany() bool {
	if o != nil && o.Company.IsSet() {
		return true
	}

	return false
}

// SetCompany gets a reference to the given NullableString and assigns it to the Company field.
func (o *ReportItem) SetCompany(v string) {
	o.Company.Set(&v)
}
// SetCompanyNil sets the value for Company to be an explicit nil
func (o *ReportItem) SetCompanyNil() {
	o.Company.Set(nil)
}

// UnsetCompany ensures that no value is present for Company, not even an explicit nil
func (o *ReportItem) UnsetCompany() {
	o.Company.Unset()
}

func (o ReportItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RemoteId.IsSet() {
		toSerialize["remote_id"] = o.RemoteId.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	if o.SubItems != nil {
		toSerialize["sub_items"] = o.SubItems
	}
	if o.Company.IsSet() {
		toSerialize["company"] = o.Company.Get()
	}
	return json.Marshal(toSerialize)
}

func (v *ReportItem) UnmarshalJSON(src []byte) error {
    type ReportItemUnmarshalTarget ReportItem

	var intermediateResult ReportItemUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = ReportItem(intermediateResult)
	return nil
}
type NullableReportItem struct {
	value *ReportItem
	isSet bool
}

func (v NullableReportItem) Get() *ReportItem {
	return v.value
}

func (v *NullableReportItem) Set(val *ReportItem) {
	v.value = val
	v.isSet = true
}

func (v NullableReportItem) IsSet() bool {
	return v.isSet
}

func (v *NullableReportItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportItem(val *ReportItem) *NullableReportItem {
	return &NullableReportItem{value: val, isSet: true}
}

func (v NullableReportItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


