/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_accounting_client

import (
	"encoding/json"
	"time"
)

// CompanyInfo # The CompanyInfo Object ### Description The `CompanyInfo` object is used to represent a company's information.  ### Usage Example Fetch from the `GET CompanyInfo` endpoint and view a company's information.
type CompanyInfo struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId NullableString `json:"remote_id,omitempty"`
	RemoteData []RemoteData `json:"remote_data,omitempty"`
	// The company's name.
	Name NullableString `json:"name,omitempty"`
	// The company's legal name.
	LegalName NullableString `json:"legal_name,omitempty"`
	// The company's tax number.
	TaxNumber NullableString `json:"tax_number,omitempty"`
	// The company's fiscal year end month.
	FiscalYearEndMonth NullableInt32 `json:"fiscal_year_end_month,omitempty"`
	// The company's fiscal year end day.
	FiscalYearEndDay NullableInt32 `json:"fiscal_year_end_day,omitempty"`
	// The currency set in the company's accounting platform.
	Currency NullableCurrencyEnum `json:"currency,omitempty"`
	// When the third party's company was created.
	RemoteCreatedAt NullableTime `json:"remote_created_at,omitempty"`
	// The company's urls.
	Urls []string `json:"urls,omitempty"`
	Addresses *[]Address `json:"addresses,omitempty"`
	PhoneNumbers *[]AccountingPhoneNumber `json:"phone_numbers,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
	FieldMappings map[string]interface{} `json:"field_mappings,omitempty"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewCompanyInfo instantiates a new CompanyInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyInfo() *CompanyInfo {
	this := CompanyInfo{}
	return &this
}

// NewCompanyInfoWithDefaults instantiates a new CompanyInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyInfoWithDefaults() *CompanyInfo {
	this := CompanyInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CompanyInfo) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyInfo) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CompanyInfo) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CompanyInfo) SetId(v string) {
	o.Id = &v
}

// GetRemoteId returns the RemoteId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyInfo) GetRemoteId() string {
	if o == nil || o.RemoteId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RemoteId.Get()
}

// GetRemoteIdOk returns a tuple with the RemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyInfo) GetRemoteIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemoteId.Get(), o.RemoteId.IsSet()
}

// HasRemoteId returns a boolean if a field has been set.
func (o *CompanyInfo) HasRemoteId() bool {
	if o != nil && o.RemoteId.IsSet() {
		return true
	}

	return false
}

// SetRemoteId gets a reference to the given NullableString and assigns it to the RemoteId field.
func (o *CompanyInfo) SetRemoteId(v string) {
	o.RemoteId.Set(&v)
}
// SetRemoteIdNil sets the value for RemoteId to be an explicit nil
func (o *CompanyInfo) SetRemoteIdNil() {
	o.RemoteId.Set(nil)
}

// UnsetRemoteId ensures that no value is present for RemoteId, not even an explicit nil
func (o *CompanyInfo) UnsetRemoteId() {
	o.RemoteId.Unset()
}

// GetRemoteData returns the RemoteData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyInfo) GetRemoteData() []RemoteData {
	if o == nil  {
		var ret []RemoteData
		return ret
	}
	return o.RemoteData
}

// GetRemoteDataOk returns a tuple with the RemoteData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyInfo) GetRemoteDataOk() (*[]RemoteData, bool) {
	if o == nil || o.RemoteData == nil {
		return nil, false
	}
	return &o.RemoteData, true
}

// HasRemoteData returns a boolean if a field has been set.
func (o *CompanyInfo) HasRemoteData() bool {
	if o != nil && o.RemoteData != nil {
		return true
	}

	return false
}

// SetRemoteData gets a reference to the given []RemoteData and assigns it to the RemoteData field.
func (o *CompanyInfo) SetRemoteData(v []RemoteData) {
	o.RemoteData = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyInfo) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyInfo) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CompanyInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CompanyInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CompanyInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CompanyInfo) UnsetName() {
	o.Name.Unset()
}

// GetLegalName returns the LegalName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyInfo) GetLegalName() string {
	if o == nil || o.LegalName.Get() == nil {
		var ret string
		return ret
	}
	return *o.LegalName.Get()
}

// GetLegalNameOk returns a tuple with the LegalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyInfo) GetLegalNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LegalName.Get(), o.LegalName.IsSet()
}

// HasLegalName returns a boolean if a field has been set.
func (o *CompanyInfo) HasLegalName() bool {
	if o != nil && o.LegalName.IsSet() {
		return true
	}

	return false
}

// SetLegalName gets a reference to the given NullableString and assigns it to the LegalName field.
func (o *CompanyInfo) SetLegalName(v string) {
	o.LegalName.Set(&v)
}
// SetLegalNameNil sets the value for LegalName to be an explicit nil
func (o *CompanyInfo) SetLegalNameNil() {
	o.LegalName.Set(nil)
}

// UnsetLegalName ensures that no value is present for LegalName, not even an explicit nil
func (o *CompanyInfo) UnsetLegalName() {
	o.LegalName.Unset()
}

// GetTaxNumber returns the TaxNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyInfo) GetTaxNumber() string {
	if o == nil || o.TaxNumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.TaxNumber.Get()
}

// GetTaxNumberOk returns a tuple with the TaxNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyInfo) GetTaxNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TaxNumber.Get(), o.TaxNumber.IsSet()
}

// HasTaxNumber returns a boolean if a field has been set.
func (o *CompanyInfo) HasTaxNumber() bool {
	if o != nil && o.TaxNumber.IsSet() {
		return true
	}

	return false
}

// SetTaxNumber gets a reference to the given NullableString and assigns it to the TaxNumber field.
func (o *CompanyInfo) SetTaxNumber(v string) {
	o.TaxNumber.Set(&v)
}
// SetTaxNumberNil sets the value for TaxNumber to be an explicit nil
func (o *CompanyInfo) SetTaxNumberNil() {
	o.TaxNumber.Set(nil)
}

// UnsetTaxNumber ensures that no value is present for TaxNumber, not even an explicit nil
func (o *CompanyInfo) UnsetTaxNumber() {
	o.TaxNumber.Unset()
}

// GetFiscalYearEndMonth returns the FiscalYearEndMonth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyInfo) GetFiscalYearEndMonth() int32 {
	if o == nil || o.FiscalYearEndMonth.Get() == nil {
		var ret int32
		return ret
	}
	return *o.FiscalYearEndMonth.Get()
}

// GetFiscalYearEndMonthOk returns a tuple with the FiscalYearEndMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyInfo) GetFiscalYearEndMonthOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FiscalYearEndMonth.Get(), o.FiscalYearEndMonth.IsSet()
}

// HasFiscalYearEndMonth returns a boolean if a field has been set.
func (o *CompanyInfo) HasFiscalYearEndMonth() bool {
	if o != nil && o.FiscalYearEndMonth.IsSet() {
		return true
	}

	return false
}

// SetFiscalYearEndMonth gets a reference to the given NullableInt32 and assigns it to the FiscalYearEndMonth field.
func (o *CompanyInfo) SetFiscalYearEndMonth(v int32) {
	o.FiscalYearEndMonth.Set(&v)
}
// SetFiscalYearEndMonthNil sets the value for FiscalYearEndMonth to be an explicit nil
func (o *CompanyInfo) SetFiscalYearEndMonthNil() {
	o.FiscalYearEndMonth.Set(nil)
}

// UnsetFiscalYearEndMonth ensures that no value is present for FiscalYearEndMonth, not even an explicit nil
func (o *CompanyInfo) UnsetFiscalYearEndMonth() {
	o.FiscalYearEndMonth.Unset()
}

// GetFiscalYearEndDay returns the FiscalYearEndDay field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyInfo) GetFiscalYearEndDay() int32 {
	if o == nil || o.FiscalYearEndDay.Get() == nil {
		var ret int32
		return ret
	}
	return *o.FiscalYearEndDay.Get()
}

// GetFiscalYearEndDayOk returns a tuple with the FiscalYearEndDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyInfo) GetFiscalYearEndDayOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FiscalYearEndDay.Get(), o.FiscalYearEndDay.IsSet()
}

// HasFiscalYearEndDay returns a boolean if a field has been set.
func (o *CompanyInfo) HasFiscalYearEndDay() bool {
	if o != nil && o.FiscalYearEndDay.IsSet() {
		return true
	}

	return false
}

// SetFiscalYearEndDay gets a reference to the given NullableInt32 and assigns it to the FiscalYearEndDay field.
func (o *CompanyInfo) SetFiscalYearEndDay(v int32) {
	o.FiscalYearEndDay.Set(&v)
}
// SetFiscalYearEndDayNil sets the value for FiscalYearEndDay to be an explicit nil
func (o *CompanyInfo) SetFiscalYearEndDayNil() {
	o.FiscalYearEndDay.Set(nil)
}

// UnsetFiscalYearEndDay ensures that no value is present for FiscalYearEndDay, not even an explicit nil
func (o *CompanyInfo) UnsetFiscalYearEndDay() {
	o.FiscalYearEndDay.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyInfo) GetCurrency() CurrencyEnum {
	if o == nil || o.Currency.Get() == nil {
		var ret CurrencyEnum
		return ret
	}
	return *o.Currency.Get()
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyInfo) GetCurrencyOk() (*CurrencyEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Currency.Get(), o.Currency.IsSet()
}

// HasCurrency returns a boolean if a field has been set.
func (o *CompanyInfo) HasCurrency() bool {
	if o != nil && o.Currency.IsSet() {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given NullableCurrencyEnum and assigns it to the Currency field.
func (o *CompanyInfo) SetCurrency(v CurrencyEnum) {
	o.Currency.Set(&v)
}
// SetCurrencyNil sets the value for Currency to be an explicit nil
func (o *CompanyInfo) SetCurrencyNil() {
	o.Currency.Set(nil)
}

// UnsetCurrency ensures that no value is present for Currency, not even an explicit nil
func (o *CompanyInfo) UnsetCurrency() {
	o.Currency.Unset()
}

// GetRemoteCreatedAt returns the RemoteCreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyInfo) GetRemoteCreatedAt() time.Time {
	if o == nil || o.RemoteCreatedAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.RemoteCreatedAt.Get()
}

// GetRemoteCreatedAtOk returns a tuple with the RemoteCreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyInfo) GetRemoteCreatedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemoteCreatedAt.Get(), o.RemoteCreatedAt.IsSet()
}

// HasRemoteCreatedAt returns a boolean if a field has been set.
func (o *CompanyInfo) HasRemoteCreatedAt() bool {
	if o != nil && o.RemoteCreatedAt.IsSet() {
		return true
	}

	return false
}

// SetRemoteCreatedAt gets a reference to the given NullableTime and assigns it to the RemoteCreatedAt field.
func (o *CompanyInfo) SetRemoteCreatedAt(v time.Time) {
	o.RemoteCreatedAt.Set(&v)
}
// SetRemoteCreatedAtNil sets the value for RemoteCreatedAt to be an explicit nil
func (o *CompanyInfo) SetRemoteCreatedAtNil() {
	o.RemoteCreatedAt.Set(nil)
}

// UnsetRemoteCreatedAt ensures that no value is present for RemoteCreatedAt, not even an explicit nil
func (o *CompanyInfo) UnsetRemoteCreatedAt() {
	o.RemoteCreatedAt.Unset()
}

// GetUrls returns the Urls field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyInfo) GetUrls() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyInfo) GetUrlsOk() (*[]string, bool) {
	if o == nil || o.Urls == nil {
		return nil, false
	}
	return &o.Urls, true
}

// HasUrls returns a boolean if a field has been set.
func (o *CompanyInfo) HasUrls() bool {
	if o != nil && o.Urls != nil {
		return true
	}

	return false
}

// SetUrls gets a reference to the given []string and assigns it to the Urls field.
func (o *CompanyInfo) SetUrls(v []string) {
	o.Urls = v
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *CompanyInfo) GetAddresses() []Address {
	if o == nil || o.Addresses == nil {
		var ret []Address
		return ret
	}
	return *o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyInfo) GetAddressesOk() (*[]Address, bool) {
	if o == nil || o.Addresses == nil {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *CompanyInfo) HasAddresses() bool {
	if o != nil && o.Addresses != nil {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []Address and assigns it to the Addresses field.
func (o *CompanyInfo) SetAddresses(v []Address) {
	o.Addresses = &v
}

// GetPhoneNumbers returns the PhoneNumbers field value if set, zero value otherwise.
func (o *CompanyInfo) GetPhoneNumbers() []AccountingPhoneNumber {
	if o == nil || o.PhoneNumbers == nil {
		var ret []AccountingPhoneNumber
		return ret
	}
	return *o.PhoneNumbers
}

// GetPhoneNumbersOk returns a tuple with the PhoneNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyInfo) GetPhoneNumbersOk() (*[]AccountingPhoneNumber, bool) {
	if o == nil || o.PhoneNumbers == nil {
		return nil, false
	}
	return o.PhoneNumbers, true
}

// HasPhoneNumbers returns a boolean if a field has been set.
func (o *CompanyInfo) HasPhoneNumbers() bool {
	if o != nil && o.PhoneNumbers != nil {
		return true
	}

	return false
}

// SetPhoneNumbers gets a reference to the given []AccountingPhoneNumber and assigns it to the PhoneNumbers field.
func (o *CompanyInfo) SetPhoneNumbers(v []AccountingPhoneNumber) {
	o.PhoneNumbers = &v
}

// GetRemoteWasDeleted returns the RemoteWasDeleted field value if set, zero value otherwise.
func (o *CompanyInfo) GetRemoteWasDeleted() bool {
	if o == nil || o.RemoteWasDeleted == nil {
		var ret bool
		return ret
	}
	return *o.RemoteWasDeleted
}

// GetRemoteWasDeletedOk returns a tuple with the RemoteWasDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyInfo) GetRemoteWasDeletedOk() (*bool, bool) {
	if o == nil || o.RemoteWasDeleted == nil {
		return nil, false
	}
	return o.RemoteWasDeleted, true
}

// HasRemoteWasDeleted returns a boolean if a field has been set.
func (o *CompanyInfo) HasRemoteWasDeleted() bool {
	if o != nil && o.RemoteWasDeleted != nil {
		return true
	}

	return false
}

// SetRemoteWasDeleted gets a reference to the given bool and assigns it to the RemoteWasDeleted field.
func (o *CompanyInfo) SetRemoteWasDeleted(v bool) {
	o.RemoteWasDeleted = &v
}

// GetFieldMappings returns the FieldMappings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyInfo) GetFieldMappings() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.FieldMappings
}

// GetFieldMappingsOk returns a tuple with the FieldMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyInfo) GetFieldMappingsOk() (*map[string]interface{}, bool) {
	if o == nil || o.FieldMappings == nil {
		return nil, false
	}
	return &o.FieldMappings, true
}

// HasFieldMappings returns a boolean if a field has been set.
func (o *CompanyInfo) HasFieldMappings() bool {
	if o != nil && o.FieldMappings != nil {
		return true
	}

	return false
}

// SetFieldMappings gets a reference to the given map[string]interface{} and assigns it to the FieldMappings field.
func (o *CompanyInfo) SetFieldMappings(v map[string]interface{}) {
	o.FieldMappings = v
}

func (o CompanyInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.RemoteId.IsSet() {
		toSerialize["remote_id"] = o.RemoteId.Get()
	}
	if o.RemoteData != nil {
		toSerialize["remote_data"] = o.RemoteData
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.LegalName.IsSet() {
		toSerialize["legal_name"] = o.LegalName.Get()
	}
	if o.TaxNumber.IsSet() {
		toSerialize["tax_number"] = o.TaxNumber.Get()
	}
	if o.FiscalYearEndMonth.IsSet() {
		toSerialize["fiscal_year_end_month"] = o.FiscalYearEndMonth.Get()
	}
	if o.FiscalYearEndDay.IsSet() {
		toSerialize["fiscal_year_end_day"] = o.FiscalYearEndDay.Get()
	}
	if o.Currency.IsSet() {
		toSerialize["currency"] = o.Currency.Get()
	}
	if o.RemoteCreatedAt.IsSet() {
		toSerialize["remote_created_at"] = o.RemoteCreatedAt.Get()
	}
	if o.Urls != nil {
		toSerialize["urls"] = o.Urls
	}
	if o.Addresses != nil {
		toSerialize["addresses"] = o.Addresses
	}
	if o.PhoneNumbers != nil {
		toSerialize["phone_numbers"] = o.PhoneNumbers
	}
	if o.RemoteWasDeleted != nil {
		toSerialize["remote_was_deleted"] = o.RemoteWasDeleted
	}
	if o.FieldMappings != nil {
		toSerialize["field_mappings"] = o.FieldMappings
	}
	return json.Marshal(toSerialize)
}

func (v *CompanyInfo) UnmarshalJSON(src []byte) error {
    type CompanyInfoUnmarshalTarget CompanyInfo

	var intermediateResult CompanyInfoUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = CompanyInfo(intermediateResult)
	return nil
}
type NullableCompanyInfo struct {
	value *CompanyInfo
	isSet bool
}

func (v NullableCompanyInfo) Get() *CompanyInfo {
	return v.value
}

func (v *NullableCompanyInfo) Set(val *CompanyInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyInfo(val *CompanyInfo) *NullableCompanyInfo {
	return &NullableCompanyInfo{value: val, isSet: true}
}

func (v NullableCompanyInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


