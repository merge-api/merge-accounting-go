/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_accounting_client

import (
	"encoding/json"
	"fmt"
)

// Status7d1Enum * `ACTIVE` - ACTIVE * `ARCHIVED` - ARCHIVED
type Status7d1Enum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of Status7d1Enum
const (
    STATUS7D1ENUM_MERGE_NONSTANDARD_VALUE Status7d1Enum = "MERGE_NONSTANDARD_VALUE"
    
	STATUS7D1ENUM_ACTIVE Status7d1Enum = "ACTIVE"
	STATUS7D1ENUM_ARCHIVED Status7d1Enum = "ARCHIVED"
)

var allowedStatus7d1EnumEnumValues = []Status7d1Enum{
	"ACTIVE",
	"ARCHIVED",
}

func (v *Status7d1Enum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Status7d1Enum(value)
	for _, existing := range allowedStatus7d1EnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = STATUS7D1ENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewStatus7d1EnumFromValue returns a pointer to a valid Status7d1Enum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatus7d1EnumFromValue(v string) (*Status7d1Enum, error) {
	ev := Status7d1Enum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := STATUS7D1ENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Status7d1Enum) IsValid() bool {
	for _, existing := range allowedStatus7d1EnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Status7d1Enum value
func (v Status7d1Enum) Ptr() *Status7d1Enum {
	return &v
}

type NullableStatus7d1Enum struct {
	value *Status7d1Enum
	isSet bool
}

func (v NullableStatus7d1Enum) Get() *Status7d1Enum {
	return v.value
}

func (v *NullableStatus7d1Enum) Set(val *Status7d1Enum) {
	v.value = val
	v.isSet = true
}

func (v NullableStatus7d1Enum) IsSet() bool {
	return v.isSet
}

func (v *NullableStatus7d1Enum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatus7d1Enum(val *Status7d1Enum) *NullableStatus7d1Enum {
	return &NullableStatus7d1Enum{value: val, isSet: true}
}

func (v NullableStatus7d1Enum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatus7d1Enum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

