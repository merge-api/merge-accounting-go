/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_accounting_client

import (
	"encoding/json"
)

// AccountingAttachmentRequest # The Accounting Attachment Object ### Description The `AccountingAttachment` object is used to represent a company's attachments.  ### Usage Example Fetch from the `LIST AccountingAttachments` endpoint and view a company's attachments.
type AccountingAttachmentRequest struct {
	// The attachment's name.
	FileName NullableString `json:"file_name,omitempty"`
	// The attachment's url.
	FileUrl NullableString `json:"file_url,omitempty"`
	// The company the accounting attachment belongs to.
	Company NullableString `json:"company,omitempty"`
	IntegrationParams map[string]interface{} `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewAccountingAttachmentRequest instantiates a new AccountingAttachmentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountingAttachmentRequest() *AccountingAttachmentRequest {
	this := AccountingAttachmentRequest{}
	return &this
}

// NewAccountingAttachmentRequestWithDefaults instantiates a new AccountingAttachmentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountingAttachmentRequestWithDefaults() *AccountingAttachmentRequest {
	this := AccountingAttachmentRequest{}
	return &this
}

// GetFileName returns the FileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingAttachmentRequest) GetFileName() string {
	if o == nil || o.FileName.Get() == nil {
		var ret string
		return ret
	}
	return *o.FileName.Get()
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingAttachmentRequest) GetFileNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileName.Get(), o.FileName.IsSet()
}

// HasFileName returns a boolean if a field has been set.
func (o *AccountingAttachmentRequest) HasFileName() bool {
	if o != nil && o.FileName.IsSet() {
		return true
	}

	return false
}

// SetFileName gets a reference to the given NullableString and assigns it to the FileName field.
func (o *AccountingAttachmentRequest) SetFileName(v string) {
	o.FileName.Set(&v)
}
// SetFileNameNil sets the value for FileName to be an explicit nil
func (o *AccountingAttachmentRequest) SetFileNameNil() {
	o.FileName.Set(nil)
}

// UnsetFileName ensures that no value is present for FileName, not even an explicit nil
func (o *AccountingAttachmentRequest) UnsetFileName() {
	o.FileName.Unset()
}

// GetFileUrl returns the FileUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingAttachmentRequest) GetFileUrl() string {
	if o == nil || o.FileUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.FileUrl.Get()
}

// GetFileUrlOk returns a tuple with the FileUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingAttachmentRequest) GetFileUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileUrl.Get(), o.FileUrl.IsSet()
}

// HasFileUrl returns a boolean if a field has been set.
func (o *AccountingAttachmentRequest) HasFileUrl() bool {
	if o != nil && o.FileUrl.IsSet() {
		return true
	}

	return false
}

// SetFileUrl gets a reference to the given NullableString and assigns it to the FileUrl field.
func (o *AccountingAttachmentRequest) SetFileUrl(v string) {
	o.FileUrl.Set(&v)
}
// SetFileUrlNil sets the value for FileUrl to be an explicit nil
func (o *AccountingAttachmentRequest) SetFileUrlNil() {
	o.FileUrl.Set(nil)
}

// UnsetFileUrl ensures that no value is present for FileUrl, not even an explicit nil
func (o *AccountingAttachmentRequest) UnsetFileUrl() {
	o.FileUrl.Unset()
}

// GetCompany returns the Company field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingAttachmentRequest) GetCompany() string {
	if o == nil || o.Company.Get() == nil {
		var ret string
		return ret
	}
	return *o.Company.Get()
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingAttachmentRequest) GetCompanyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Company.Get(), o.Company.IsSet()
}

// HasCompany returns a boolean if a field has been set.
func (o *AccountingAttachmentRequest) HasCompany() bool {
	if o != nil && o.Company.IsSet() {
		return true
	}

	return false
}

// SetCompany gets a reference to the given NullableString and assigns it to the Company field.
func (o *AccountingAttachmentRequest) SetCompany(v string) {
	o.Company.Set(&v)
}
// SetCompanyNil sets the value for Company to be an explicit nil
func (o *AccountingAttachmentRequest) SetCompanyNil() {
	o.Company.Set(nil)
}

// UnsetCompany ensures that no value is present for Company, not even an explicit nil
func (o *AccountingAttachmentRequest) UnsetCompany() {
	o.Company.Unset()
}

// GetIntegrationParams returns the IntegrationParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingAttachmentRequest) GetIntegrationParams() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.IntegrationParams
}

// GetIntegrationParamsOk returns a tuple with the IntegrationParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingAttachmentRequest) GetIntegrationParamsOk() (*map[string]interface{}, bool) {
	if o == nil || o.IntegrationParams == nil {
		return nil, false
	}
	return &o.IntegrationParams, true
}

// HasIntegrationParams returns a boolean if a field has been set.
func (o *AccountingAttachmentRequest) HasIntegrationParams() bool {
	if o != nil && o.IntegrationParams != nil {
		return true
	}

	return false
}

// SetIntegrationParams gets a reference to the given map[string]interface{} and assigns it to the IntegrationParams field.
func (o *AccountingAttachmentRequest) SetIntegrationParams(v map[string]interface{}) {
	o.IntegrationParams = v
}

// GetLinkedAccountParams returns the LinkedAccountParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingAttachmentRequest) GetLinkedAccountParams() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.LinkedAccountParams
}

// GetLinkedAccountParamsOk returns a tuple with the LinkedAccountParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingAttachmentRequest) GetLinkedAccountParamsOk() (*map[string]interface{}, bool) {
	if o == nil || o.LinkedAccountParams == nil {
		return nil, false
	}
	return &o.LinkedAccountParams, true
}

// HasLinkedAccountParams returns a boolean if a field has been set.
func (o *AccountingAttachmentRequest) HasLinkedAccountParams() bool {
	if o != nil && o.LinkedAccountParams != nil {
		return true
	}

	return false
}

// SetLinkedAccountParams gets a reference to the given map[string]interface{} and assigns it to the LinkedAccountParams field.
func (o *AccountingAttachmentRequest) SetLinkedAccountParams(v map[string]interface{}) {
	o.LinkedAccountParams = v
}

func (o AccountingAttachmentRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FileName.IsSet() {
		toSerialize["file_name"] = o.FileName.Get()
	}
	if o.FileUrl.IsSet() {
		toSerialize["file_url"] = o.FileUrl.Get()
	}
	if o.Company.IsSet() {
		toSerialize["company"] = o.Company.Get()
	}
	if o.IntegrationParams != nil {
		toSerialize["integration_params"] = o.IntegrationParams
	}
	if o.LinkedAccountParams != nil {
		toSerialize["linked_account_params"] = o.LinkedAccountParams
	}
	return json.Marshal(toSerialize)
}

func (v *AccountingAttachmentRequest) UnmarshalJSON(src []byte) error {
    type AccountingAttachmentRequestUnmarshalTarget AccountingAttachmentRequest

	var intermediateResult AccountingAttachmentRequestUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = AccountingAttachmentRequest(intermediateResult)
	return nil
}
type NullableAccountingAttachmentRequest struct {
	value *AccountingAttachmentRequest
	isSet bool
}

func (v NullableAccountingAttachmentRequest) Get() *AccountingAttachmentRequest {
	return v.value
}

func (v *NullableAccountingAttachmentRequest) Set(val *AccountingAttachmentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountingAttachmentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountingAttachmentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountingAttachmentRequest(val *AccountingAttachmentRequest) *NullableAccountingAttachmentRequest {
	return &NullableAccountingAttachmentRequest{value: val, isSet: true}
}

func (v NullableAccountingAttachmentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountingAttachmentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


