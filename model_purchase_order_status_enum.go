/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_accounting_client

import (
	"encoding/json"
	"fmt"
)

// PurchaseOrderStatusEnum the model 'PurchaseOrderStatusEnum'
type PurchaseOrderStatusEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of PurchaseOrderStatusEnum
const (
    PURCHASEORDERSTATUSENUM_MERGE_NONSTANDARD_VALUE PurchaseOrderStatusEnum = "MERGE_NONSTANDARD_VALUE"
    
	PURCHASEORDERSTATUSENUM_DRAFT PurchaseOrderStatusEnum = "DRAFT"
	PURCHASEORDERSTATUSENUM_SUBMITTED PurchaseOrderStatusEnum = "SUBMITTED"
	PURCHASEORDERSTATUSENUM_AUTHORIZED PurchaseOrderStatusEnum = "AUTHORIZED"
	PURCHASEORDERSTATUSENUM_BILLED PurchaseOrderStatusEnum = "BILLED"
	PURCHASEORDERSTATUSENUM_DELETED PurchaseOrderStatusEnum = "DELETED"
)

var allowedPurchaseOrderStatusEnumEnumValues = []PurchaseOrderStatusEnum{
	"DRAFT",
	"SUBMITTED",
	"AUTHORIZED",
	"BILLED",
	"DELETED",
}

func (v *PurchaseOrderStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PurchaseOrderStatusEnum(value)
	for _, existing := range allowedPurchaseOrderStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = PURCHASEORDERSTATUSENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewPurchaseOrderStatusEnumFromValue returns a pointer to a valid PurchaseOrderStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPurchaseOrderStatusEnumFromValue(v string) (*PurchaseOrderStatusEnum, error) {
	ev := PurchaseOrderStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := PURCHASEORDERSTATUSENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PurchaseOrderStatusEnum) IsValid() bool {
	for _, existing := range allowedPurchaseOrderStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PurchaseOrderStatusEnum value
func (v PurchaseOrderStatusEnum) Ptr() *PurchaseOrderStatusEnum {
	return &v
}

type NullablePurchaseOrderStatusEnum struct {
	value *PurchaseOrderStatusEnum
	isSet bool
}

func (v NullablePurchaseOrderStatusEnum) Get() *PurchaseOrderStatusEnum {
	return v.value
}

func (v *NullablePurchaseOrderStatusEnum) Set(val *PurchaseOrderStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchaseOrderStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchaseOrderStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchaseOrderStatusEnum(val *PurchaseOrderStatusEnum) *NullablePurchaseOrderStatusEnum {
	return &NullablePurchaseOrderStatusEnum{value: val, isSet: true}
}

func (v NullablePurchaseOrderStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchaseOrderStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

