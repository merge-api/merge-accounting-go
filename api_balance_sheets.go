/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_accounting_client

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// BalanceSheetsApiService BalanceSheetsApi service
type BalanceSheetsApiService service

type ApiBalanceSheetsListRequest struct {
	ctx _context.Context
	ApiService *BalanceSheetsApiService
	xAccountToken *string
	companyId *string
	createdAfter *time.Time
	createdBefore *time.Time
	cursor *string
	includeDeletedData *bool
	includeRemoteData *bool
	modifiedAfter *time.Time
	modifiedBefore *time.Time
	pageSize *int32
	remoteId *string
}

func (r ApiBalanceSheetsListRequest) XAccountToken(xAccountToken string) ApiBalanceSheetsListRequest {
	r.xAccountToken = &xAccountToken
	return r
}
func (r ApiBalanceSheetsListRequest) CompanyId(companyId string) ApiBalanceSheetsListRequest {
	r.companyId = &companyId
	return r
}
func (r ApiBalanceSheetsListRequest) CreatedAfter(createdAfter time.Time) ApiBalanceSheetsListRequest {
	r.createdAfter = &createdAfter
	return r
}
func (r ApiBalanceSheetsListRequest) CreatedBefore(createdBefore time.Time) ApiBalanceSheetsListRequest {
	r.createdBefore = &createdBefore
	return r
}
func (r ApiBalanceSheetsListRequest) Cursor(cursor string) ApiBalanceSheetsListRequest {
	r.cursor = &cursor
	return r
}
func (r ApiBalanceSheetsListRequest) IncludeDeletedData(includeDeletedData bool) ApiBalanceSheetsListRequest {
	r.includeDeletedData = &includeDeletedData
	return r
}
func (r ApiBalanceSheetsListRequest) IncludeRemoteData(includeRemoteData bool) ApiBalanceSheetsListRequest {
	r.includeRemoteData = &includeRemoteData
	return r
}
func (r ApiBalanceSheetsListRequest) ModifiedAfter(modifiedAfter time.Time) ApiBalanceSheetsListRequest {
	r.modifiedAfter = &modifiedAfter
	return r
}
func (r ApiBalanceSheetsListRequest) ModifiedBefore(modifiedBefore time.Time) ApiBalanceSheetsListRequest {
	r.modifiedBefore = &modifiedBefore
	return r
}
func (r ApiBalanceSheetsListRequest) PageSize(pageSize int32) ApiBalanceSheetsListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiBalanceSheetsListRequest) RemoteId(remoteId string) ApiBalanceSheetsListRequest {
	r.remoteId = &remoteId
	return r
}

func (r ApiBalanceSheetsListRequest) Execute() (PaginatedBalanceSheetList, *_nethttp.Response, error) {
	return r.ApiService.BalanceSheetsListExecute(r)
}

/*
 * BalanceSheetsList Method for BalanceSheetsList
 * Returns a list of `BalanceSheet` objects.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiBalanceSheetsListRequest
 */
func (a *BalanceSheetsApiService) BalanceSheetsList(ctx _context.Context) ApiBalanceSheetsListRequest {
	return ApiBalanceSheetsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PaginatedBalanceSheetList
 */
func (a *BalanceSheetsApiService) BalanceSheetsListExecute(r ApiBalanceSheetsListRequest) (PaginatedBalanceSheetList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PaginatedBalanceSheetList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BalanceSheetsApiService.BalanceSheetsList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/balance-sheets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAccountToken == nil {
		return localVarReturnValue, nil, reportError("xAccountToken is required and must be specified")
	}

	if r.companyId != nil {
		localVarQueryParams.Add("company_id", parameterToString(*r.companyId, ""))
	}
	if r.createdAfter != nil {
		localVarQueryParams.Add("created_after", parameterToString(*r.createdAfter, ""))
	}
	if r.createdBefore != nil {
		localVarQueryParams.Add("created_before", parameterToString(*r.createdBefore, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.includeDeletedData != nil {
		localVarQueryParams.Add("include_deleted_data", parameterToString(*r.includeDeletedData, ""))
	}
	if r.includeRemoteData != nil {
		localVarQueryParams.Add("include_remote_data", parameterToString(*r.includeRemoteData, ""))
	}
	if r.modifiedAfter != nil {
		localVarQueryParams.Add("modified_after", parameterToString(*r.modifiedAfter, ""))
	}
	if r.modifiedBefore != nil {
		localVarQueryParams.Add("modified_before", parameterToString(*r.modifiedBefore, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.remoteId != nil {
		localVarQueryParams.Add("remote_id", parameterToString(*r.remoteId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Account-Token"] = parameterToString(*r.xAccountToken, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBalanceSheetsRetrieveRequest struct {
	ctx _context.Context
	ApiService *BalanceSheetsApiService
	xAccountToken *string
	id string
	includeRemoteData *bool
}

func (r ApiBalanceSheetsRetrieveRequest) XAccountToken(xAccountToken string) ApiBalanceSheetsRetrieveRequest {
	r.xAccountToken = &xAccountToken
	return r
}
func (r ApiBalanceSheetsRetrieveRequest) IncludeRemoteData(includeRemoteData bool) ApiBalanceSheetsRetrieveRequest {
	r.includeRemoteData = &includeRemoteData
	return r
}

func (r ApiBalanceSheetsRetrieveRequest) Execute() (BalanceSheet, *_nethttp.Response, error) {
	return r.ApiService.BalanceSheetsRetrieveExecute(r)
}

/*
 * BalanceSheetsRetrieve Method for BalanceSheetsRetrieve
 * Returns a `BalanceSheet` object with the given `id`.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiBalanceSheetsRetrieveRequest
 */
func (a *BalanceSheetsApiService) BalanceSheetsRetrieve(ctx _context.Context, id string) ApiBalanceSheetsRetrieveRequest {
	return ApiBalanceSheetsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return BalanceSheet
 */
func (a *BalanceSheetsApiService) BalanceSheetsRetrieveExecute(r ApiBalanceSheetsRetrieveRequest) (BalanceSheet, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BalanceSheet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BalanceSheetsApiService.BalanceSheetsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/balance-sheets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAccountToken == nil {
		return localVarReturnValue, nil, reportError("xAccountToken is required and must be specified")
	}

	if r.includeRemoteData != nil {
		localVarQueryParams.Add("include_remote_data", parameterToString(*r.includeRemoteData, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Account-Token"] = parameterToString(*r.xAccountToken, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
