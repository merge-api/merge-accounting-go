/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_accounting_client

import (
	"encoding/json"
	"fmt"
)

// InvoiceTypeEnum * `ACCOUNTS_RECEIVABLE` - ACCOUNTS_RECEIVABLE * `ACCOUNTS_PAYABLE` - ACCOUNTS_PAYABLE
type InvoiceTypeEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of InvoiceTypeEnum
const (
    INVOICETYPEENUM_MERGE_NONSTANDARD_VALUE InvoiceTypeEnum = "MERGE_NONSTANDARD_VALUE"
    
	INVOICETYPEENUM_RECEIVABLE InvoiceTypeEnum = "ACCOUNTS_RECEIVABLE"
	INVOICETYPEENUM_PAYABLE InvoiceTypeEnum = "ACCOUNTS_PAYABLE"
)

var allowedInvoiceTypeEnumEnumValues = []InvoiceTypeEnum{
	"ACCOUNTS_RECEIVABLE",
	"ACCOUNTS_PAYABLE",
}

func (v *InvoiceTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InvoiceTypeEnum(value)
	for _, existing := range allowedInvoiceTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = INVOICETYPEENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewInvoiceTypeEnumFromValue returns a pointer to a valid InvoiceTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInvoiceTypeEnumFromValue(v string) (*InvoiceTypeEnum, error) {
	ev := InvoiceTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := INVOICETYPEENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InvoiceTypeEnum) IsValid() bool {
	for _, existing := range allowedInvoiceTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InvoiceTypeEnum value
func (v InvoiceTypeEnum) Ptr() *InvoiceTypeEnum {
	return &v
}

type NullableInvoiceTypeEnum struct {
	value *InvoiceTypeEnum
	isSet bool
}

func (v NullableInvoiceTypeEnum) Get() *InvoiceTypeEnum {
	return v.value
}

func (v *NullableInvoiceTypeEnum) Set(val *InvoiceTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoiceTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoiceTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoiceTypeEnum(val *InvoiceTypeEnum) *NullableInvoiceTypeEnum {
	return &NullableInvoiceTypeEnum{value: val, isSet: true}
}

func (v NullableInvoiceTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoiceTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

