/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_accounting_client

import (
	"encoding/json"
)

// TaxRate # The TaxRate Object ### Description The `TaxRate` object is used to represent a tax rate.  ### Usage Example Fetch from the `LIST TaxRates` endpoint and view tax rates relevant to a company.
type TaxRate struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId NullableString `json:"remote_id,omitempty"`
	RemoteData []RemoteData `json:"remote_data,omitempty"`
	// The tax rate's description.
	Description NullableString `json:"description,omitempty"`
	// The tax rate's total tax rate.
	TotalTaxRate NullableFloat32 `json:"total_tax_rate,omitempty"`
	// The tax rate's effective tax rate.
	EffectiveTaxRate NullableFloat32 `json:"effective_tax_rate,omitempty"`
	// The company the tax rate belongs to.
	Company NullableString `json:"company,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
	FieldMappings map[string]interface{} `json:"field_mappings,omitempty"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewTaxRate instantiates a new TaxRate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxRate() *TaxRate {
	this := TaxRate{}
	return &this
}

// NewTaxRateWithDefaults instantiates a new TaxRate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxRateWithDefaults() *TaxRate {
	this := TaxRate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TaxRate) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxRate) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TaxRate) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TaxRate) SetId(v string) {
	o.Id = &v
}

// GetRemoteId returns the RemoteId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxRate) GetRemoteId() string {
	if o == nil || o.RemoteId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RemoteId.Get()
}

// GetRemoteIdOk returns a tuple with the RemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxRate) GetRemoteIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemoteId.Get(), o.RemoteId.IsSet()
}

// HasRemoteId returns a boolean if a field has been set.
func (o *TaxRate) HasRemoteId() bool {
	if o != nil && o.RemoteId.IsSet() {
		return true
	}

	return false
}

// SetRemoteId gets a reference to the given NullableString and assigns it to the RemoteId field.
func (o *TaxRate) SetRemoteId(v string) {
	o.RemoteId.Set(&v)
}
// SetRemoteIdNil sets the value for RemoteId to be an explicit nil
func (o *TaxRate) SetRemoteIdNil() {
	o.RemoteId.Set(nil)
}

// UnsetRemoteId ensures that no value is present for RemoteId, not even an explicit nil
func (o *TaxRate) UnsetRemoteId() {
	o.RemoteId.Unset()
}

// GetRemoteData returns the RemoteData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxRate) GetRemoteData() []RemoteData {
	if o == nil  {
		var ret []RemoteData
		return ret
	}
	return o.RemoteData
}

// GetRemoteDataOk returns a tuple with the RemoteData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxRate) GetRemoteDataOk() (*[]RemoteData, bool) {
	if o == nil || o.RemoteData == nil {
		return nil, false
	}
	return &o.RemoteData, true
}

// HasRemoteData returns a boolean if a field has been set.
func (o *TaxRate) HasRemoteData() bool {
	if o != nil && o.RemoteData != nil {
		return true
	}

	return false
}

// SetRemoteData gets a reference to the given []RemoteData and assigns it to the RemoteData field.
func (o *TaxRate) SetRemoteData(v []RemoteData) {
	o.RemoteData = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxRate) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxRate) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *TaxRate) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *TaxRate) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *TaxRate) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *TaxRate) UnsetDescription() {
	o.Description.Unset()
}

// GetTotalTaxRate returns the TotalTaxRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxRate) GetTotalTaxRate() float32 {
	if o == nil || o.TotalTaxRate.Get() == nil {
		var ret float32
		return ret
	}
	return *o.TotalTaxRate.Get()
}

// GetTotalTaxRateOk returns a tuple with the TotalTaxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxRate) GetTotalTaxRateOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TotalTaxRate.Get(), o.TotalTaxRate.IsSet()
}

// HasTotalTaxRate returns a boolean if a field has been set.
func (o *TaxRate) HasTotalTaxRate() bool {
	if o != nil && o.TotalTaxRate.IsSet() {
		return true
	}

	return false
}

// SetTotalTaxRate gets a reference to the given NullableFloat32 and assigns it to the TotalTaxRate field.
func (o *TaxRate) SetTotalTaxRate(v float32) {
	o.TotalTaxRate.Set(&v)
}
// SetTotalTaxRateNil sets the value for TotalTaxRate to be an explicit nil
func (o *TaxRate) SetTotalTaxRateNil() {
	o.TotalTaxRate.Set(nil)
}

// UnsetTotalTaxRate ensures that no value is present for TotalTaxRate, not even an explicit nil
func (o *TaxRate) UnsetTotalTaxRate() {
	o.TotalTaxRate.Unset()
}

// GetEffectiveTaxRate returns the EffectiveTaxRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxRate) GetEffectiveTaxRate() float32 {
	if o == nil || o.EffectiveTaxRate.Get() == nil {
		var ret float32
		return ret
	}
	return *o.EffectiveTaxRate.Get()
}

// GetEffectiveTaxRateOk returns a tuple with the EffectiveTaxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxRate) GetEffectiveTaxRateOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EffectiveTaxRate.Get(), o.EffectiveTaxRate.IsSet()
}

// HasEffectiveTaxRate returns a boolean if a field has been set.
func (o *TaxRate) HasEffectiveTaxRate() bool {
	if o != nil && o.EffectiveTaxRate.IsSet() {
		return true
	}

	return false
}

// SetEffectiveTaxRate gets a reference to the given NullableFloat32 and assigns it to the EffectiveTaxRate field.
func (o *TaxRate) SetEffectiveTaxRate(v float32) {
	o.EffectiveTaxRate.Set(&v)
}
// SetEffectiveTaxRateNil sets the value for EffectiveTaxRate to be an explicit nil
func (o *TaxRate) SetEffectiveTaxRateNil() {
	o.EffectiveTaxRate.Set(nil)
}

// UnsetEffectiveTaxRate ensures that no value is present for EffectiveTaxRate, not even an explicit nil
func (o *TaxRate) UnsetEffectiveTaxRate() {
	o.EffectiveTaxRate.Unset()
}

// GetCompany returns the Company field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxRate) GetCompany() string {
	if o == nil || o.Company.Get() == nil {
		var ret string
		return ret
	}
	return *o.Company.Get()
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxRate) GetCompanyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Company.Get(), o.Company.IsSet()
}

// HasCompany returns a boolean if a field has been set.
func (o *TaxRate) HasCompany() bool {
	if o != nil && o.Company.IsSet() {
		return true
	}

	return false
}

// SetCompany gets a reference to the given NullableString and assigns it to the Company field.
func (o *TaxRate) SetCompany(v string) {
	o.Company.Set(&v)
}
// SetCompanyNil sets the value for Company to be an explicit nil
func (o *TaxRate) SetCompanyNil() {
	o.Company.Set(nil)
}

// UnsetCompany ensures that no value is present for Company, not even an explicit nil
func (o *TaxRate) UnsetCompany() {
	o.Company.Unset()
}

// GetRemoteWasDeleted returns the RemoteWasDeleted field value if set, zero value otherwise.
func (o *TaxRate) GetRemoteWasDeleted() bool {
	if o == nil || o.RemoteWasDeleted == nil {
		var ret bool
		return ret
	}
	return *o.RemoteWasDeleted
}

// GetRemoteWasDeletedOk returns a tuple with the RemoteWasDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxRate) GetRemoteWasDeletedOk() (*bool, bool) {
	if o == nil || o.RemoteWasDeleted == nil {
		return nil, false
	}
	return o.RemoteWasDeleted, true
}

// HasRemoteWasDeleted returns a boolean if a field has been set.
func (o *TaxRate) HasRemoteWasDeleted() bool {
	if o != nil && o.RemoteWasDeleted != nil {
		return true
	}

	return false
}

// SetRemoteWasDeleted gets a reference to the given bool and assigns it to the RemoteWasDeleted field.
func (o *TaxRate) SetRemoteWasDeleted(v bool) {
	o.RemoteWasDeleted = &v
}

// GetFieldMappings returns the FieldMappings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxRate) GetFieldMappings() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.FieldMappings
}

// GetFieldMappingsOk returns a tuple with the FieldMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxRate) GetFieldMappingsOk() (*map[string]interface{}, bool) {
	if o == nil || o.FieldMappings == nil {
		return nil, false
	}
	return &o.FieldMappings, true
}

// HasFieldMappings returns a boolean if a field has been set.
func (o *TaxRate) HasFieldMappings() bool {
	if o != nil && o.FieldMappings != nil {
		return true
	}

	return false
}

// SetFieldMappings gets a reference to the given map[string]interface{} and assigns it to the FieldMappings field.
func (o *TaxRate) SetFieldMappings(v map[string]interface{}) {
	o.FieldMappings = v
}

func (o TaxRate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.RemoteId.IsSet() {
		toSerialize["remote_id"] = o.RemoteId.Get()
	}
	if o.RemoteData != nil {
		toSerialize["remote_data"] = o.RemoteData
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.TotalTaxRate.IsSet() {
		toSerialize["total_tax_rate"] = o.TotalTaxRate.Get()
	}
	if o.EffectiveTaxRate.IsSet() {
		toSerialize["effective_tax_rate"] = o.EffectiveTaxRate.Get()
	}
	if o.Company.IsSet() {
		toSerialize["company"] = o.Company.Get()
	}
	if o.RemoteWasDeleted != nil {
		toSerialize["remote_was_deleted"] = o.RemoteWasDeleted
	}
	if o.FieldMappings != nil {
		toSerialize["field_mappings"] = o.FieldMappings
	}
	return json.Marshal(toSerialize)
}

func (v *TaxRate) UnmarshalJSON(src []byte) error {
    type TaxRateUnmarshalTarget TaxRate

	var intermediateResult TaxRateUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = TaxRate(intermediateResult)
	return nil
}
type NullableTaxRate struct {
	value *TaxRate
	isSet bool
}

func (v NullableTaxRate) Get() *TaxRate {
	return v.value
}

func (v *NullableTaxRate) Set(val *TaxRate) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxRate) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxRate(val *TaxRate) *NullableTaxRate {
	return &NullableTaxRate{value: val, isSet: true}
}

func (v NullableTaxRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


