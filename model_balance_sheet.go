/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_accounting_client

import (
	"encoding/json"
	"time"
)

// BalanceSheet # The BalanceSheet Object ### Description The `BalanceSheet` object shows a company’s assets, liabilities, and equity. Assets should be equal to liability and equity combined. This shows the company’s financial health at a specific point in time.  ### Usage Example Fetch from the `LIST BalanceSheets` endpoint and view a company's balance sheets.
type BalanceSheet struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId NullableString `json:"remote_id,omitempty"`
	RemoteData []RemoteData `json:"remote_data,omitempty"`
	// The balance sheet's name.
	Name NullableString `json:"name,omitempty"`
	// The balance sheet's currency.
	Currency NullableCurrencyEnum `json:"currency,omitempty"`
	// The company the balance sheet belongs to.
	Company NullableString `json:"company,omitempty"`
	// The balance sheet's date. The balance sheet data will reflect the company's financial position this point in time.
	Date NullableTime `json:"date,omitempty"`
	// The balance sheet's net assets.
	NetAssets NullableFloat32 `json:"net_assets,omitempty"`
	Assets *[]ReportItem `json:"assets,omitempty"`
	Liabilities *[]ReportItem `json:"liabilities,omitempty"`
	Equity *[]ReportItem `json:"equity,omitempty"`
	// The time that balance sheet was generated by the accounting system.
	RemoteGeneratedAt NullableTime `json:"remote_generated_at,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
	FieldMappings map[string]interface{} `json:"field_mappings,omitempty"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewBalanceSheet instantiates a new BalanceSheet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBalanceSheet() *BalanceSheet {
	this := BalanceSheet{}
	return &this
}

// NewBalanceSheetWithDefaults instantiates a new BalanceSheet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBalanceSheetWithDefaults() *BalanceSheet {
	this := BalanceSheet{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BalanceSheet) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BalanceSheet) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BalanceSheet) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BalanceSheet) SetId(v string) {
	o.Id = &v
}

// GetRemoteId returns the RemoteId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BalanceSheet) GetRemoteId() string {
	if o == nil || o.RemoteId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RemoteId.Get()
}

// GetRemoteIdOk returns a tuple with the RemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BalanceSheet) GetRemoteIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemoteId.Get(), o.RemoteId.IsSet()
}

// HasRemoteId returns a boolean if a field has been set.
func (o *BalanceSheet) HasRemoteId() bool {
	if o != nil && o.RemoteId.IsSet() {
		return true
	}

	return false
}

// SetRemoteId gets a reference to the given NullableString and assigns it to the RemoteId field.
func (o *BalanceSheet) SetRemoteId(v string) {
	o.RemoteId.Set(&v)
}
// SetRemoteIdNil sets the value for RemoteId to be an explicit nil
func (o *BalanceSheet) SetRemoteIdNil() {
	o.RemoteId.Set(nil)
}

// UnsetRemoteId ensures that no value is present for RemoteId, not even an explicit nil
func (o *BalanceSheet) UnsetRemoteId() {
	o.RemoteId.Unset()
}

// GetRemoteData returns the RemoteData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BalanceSheet) GetRemoteData() []RemoteData {
	if o == nil  {
		var ret []RemoteData
		return ret
	}
	return o.RemoteData
}

// GetRemoteDataOk returns a tuple with the RemoteData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BalanceSheet) GetRemoteDataOk() (*[]RemoteData, bool) {
	if o == nil || o.RemoteData == nil {
		return nil, false
	}
	return &o.RemoteData, true
}

// HasRemoteData returns a boolean if a field has been set.
func (o *BalanceSheet) HasRemoteData() bool {
	if o != nil && o.RemoteData != nil {
		return true
	}

	return false
}

// SetRemoteData gets a reference to the given []RemoteData and assigns it to the RemoteData field.
func (o *BalanceSheet) SetRemoteData(v []RemoteData) {
	o.RemoteData = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BalanceSheet) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BalanceSheet) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *BalanceSheet) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *BalanceSheet) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *BalanceSheet) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *BalanceSheet) UnsetName() {
	o.Name.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BalanceSheet) GetCurrency() CurrencyEnum {
	if o == nil || o.Currency.Get() == nil {
		var ret CurrencyEnum
		return ret
	}
	return *o.Currency.Get()
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BalanceSheet) GetCurrencyOk() (*CurrencyEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Currency.Get(), o.Currency.IsSet()
}

// HasCurrency returns a boolean if a field has been set.
func (o *BalanceSheet) HasCurrency() bool {
	if o != nil && o.Currency.IsSet() {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given NullableCurrencyEnum and assigns it to the Currency field.
func (o *BalanceSheet) SetCurrency(v CurrencyEnum) {
	o.Currency.Set(&v)
}
// SetCurrencyNil sets the value for Currency to be an explicit nil
func (o *BalanceSheet) SetCurrencyNil() {
	o.Currency.Set(nil)
}

// UnsetCurrency ensures that no value is present for Currency, not even an explicit nil
func (o *BalanceSheet) UnsetCurrency() {
	o.Currency.Unset()
}

// GetCompany returns the Company field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BalanceSheet) GetCompany() string {
	if o == nil || o.Company.Get() == nil {
		var ret string
		return ret
	}
	return *o.Company.Get()
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BalanceSheet) GetCompanyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Company.Get(), o.Company.IsSet()
}

// HasCompany returns a boolean if a field has been set.
func (o *BalanceSheet) HasCompany() bool {
	if o != nil && o.Company.IsSet() {
		return true
	}

	return false
}

// SetCompany gets a reference to the given NullableString and assigns it to the Company field.
func (o *BalanceSheet) SetCompany(v string) {
	o.Company.Set(&v)
}
// SetCompanyNil sets the value for Company to be an explicit nil
func (o *BalanceSheet) SetCompanyNil() {
	o.Company.Set(nil)
}

// UnsetCompany ensures that no value is present for Company, not even an explicit nil
func (o *BalanceSheet) UnsetCompany() {
	o.Company.Unset()
}

// GetDate returns the Date field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BalanceSheet) GetDate() time.Time {
	if o == nil || o.Date.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.Date.Get()
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BalanceSheet) GetDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Date.Get(), o.Date.IsSet()
}

// HasDate returns a boolean if a field has been set.
func (o *BalanceSheet) HasDate() bool {
	if o != nil && o.Date.IsSet() {
		return true
	}

	return false
}

// SetDate gets a reference to the given NullableTime and assigns it to the Date field.
func (o *BalanceSheet) SetDate(v time.Time) {
	o.Date.Set(&v)
}
// SetDateNil sets the value for Date to be an explicit nil
func (o *BalanceSheet) SetDateNil() {
	o.Date.Set(nil)
}

// UnsetDate ensures that no value is present for Date, not even an explicit nil
func (o *BalanceSheet) UnsetDate() {
	o.Date.Unset()
}

// GetNetAssets returns the NetAssets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BalanceSheet) GetNetAssets() float32 {
	if o == nil || o.NetAssets.Get() == nil {
		var ret float32
		return ret
	}
	return *o.NetAssets.Get()
}

// GetNetAssetsOk returns a tuple with the NetAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BalanceSheet) GetNetAssetsOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NetAssets.Get(), o.NetAssets.IsSet()
}

// HasNetAssets returns a boolean if a field has been set.
func (o *BalanceSheet) HasNetAssets() bool {
	if o != nil && o.NetAssets.IsSet() {
		return true
	}

	return false
}

// SetNetAssets gets a reference to the given NullableFloat32 and assigns it to the NetAssets field.
func (o *BalanceSheet) SetNetAssets(v float32) {
	o.NetAssets.Set(&v)
}
// SetNetAssetsNil sets the value for NetAssets to be an explicit nil
func (o *BalanceSheet) SetNetAssetsNil() {
	o.NetAssets.Set(nil)
}

// UnsetNetAssets ensures that no value is present for NetAssets, not even an explicit nil
func (o *BalanceSheet) UnsetNetAssets() {
	o.NetAssets.Unset()
}

// GetAssets returns the Assets field value if set, zero value otherwise.
func (o *BalanceSheet) GetAssets() []ReportItem {
	if o == nil || o.Assets == nil {
		var ret []ReportItem
		return ret
	}
	return *o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BalanceSheet) GetAssetsOk() (*[]ReportItem, bool) {
	if o == nil || o.Assets == nil {
		return nil, false
	}
	return o.Assets, true
}

// HasAssets returns a boolean if a field has been set.
func (o *BalanceSheet) HasAssets() bool {
	if o != nil && o.Assets != nil {
		return true
	}

	return false
}

// SetAssets gets a reference to the given []ReportItem and assigns it to the Assets field.
func (o *BalanceSheet) SetAssets(v []ReportItem) {
	o.Assets = &v
}

// GetLiabilities returns the Liabilities field value if set, zero value otherwise.
func (o *BalanceSheet) GetLiabilities() []ReportItem {
	if o == nil || o.Liabilities == nil {
		var ret []ReportItem
		return ret
	}
	return *o.Liabilities
}

// GetLiabilitiesOk returns a tuple with the Liabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BalanceSheet) GetLiabilitiesOk() (*[]ReportItem, bool) {
	if o == nil || o.Liabilities == nil {
		return nil, false
	}
	return o.Liabilities, true
}

// HasLiabilities returns a boolean if a field has been set.
func (o *BalanceSheet) HasLiabilities() bool {
	if o != nil && o.Liabilities != nil {
		return true
	}

	return false
}

// SetLiabilities gets a reference to the given []ReportItem and assigns it to the Liabilities field.
func (o *BalanceSheet) SetLiabilities(v []ReportItem) {
	o.Liabilities = &v
}

// GetEquity returns the Equity field value if set, zero value otherwise.
func (o *BalanceSheet) GetEquity() []ReportItem {
	if o == nil || o.Equity == nil {
		var ret []ReportItem
		return ret
	}
	return *o.Equity
}

// GetEquityOk returns a tuple with the Equity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BalanceSheet) GetEquityOk() (*[]ReportItem, bool) {
	if o == nil || o.Equity == nil {
		return nil, false
	}
	return o.Equity, true
}

// HasEquity returns a boolean if a field has been set.
func (o *BalanceSheet) HasEquity() bool {
	if o != nil && o.Equity != nil {
		return true
	}

	return false
}

// SetEquity gets a reference to the given []ReportItem and assigns it to the Equity field.
func (o *BalanceSheet) SetEquity(v []ReportItem) {
	o.Equity = &v
}

// GetRemoteGeneratedAt returns the RemoteGeneratedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BalanceSheet) GetRemoteGeneratedAt() time.Time {
	if o == nil || o.RemoteGeneratedAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.RemoteGeneratedAt.Get()
}

// GetRemoteGeneratedAtOk returns a tuple with the RemoteGeneratedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BalanceSheet) GetRemoteGeneratedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemoteGeneratedAt.Get(), o.RemoteGeneratedAt.IsSet()
}

// HasRemoteGeneratedAt returns a boolean if a field has been set.
func (o *BalanceSheet) HasRemoteGeneratedAt() bool {
	if o != nil && o.RemoteGeneratedAt.IsSet() {
		return true
	}

	return false
}

// SetRemoteGeneratedAt gets a reference to the given NullableTime and assigns it to the RemoteGeneratedAt field.
func (o *BalanceSheet) SetRemoteGeneratedAt(v time.Time) {
	o.RemoteGeneratedAt.Set(&v)
}
// SetRemoteGeneratedAtNil sets the value for RemoteGeneratedAt to be an explicit nil
func (o *BalanceSheet) SetRemoteGeneratedAtNil() {
	o.RemoteGeneratedAt.Set(nil)
}

// UnsetRemoteGeneratedAt ensures that no value is present for RemoteGeneratedAt, not even an explicit nil
func (o *BalanceSheet) UnsetRemoteGeneratedAt() {
	o.RemoteGeneratedAt.Unset()
}

// GetRemoteWasDeleted returns the RemoteWasDeleted field value if set, zero value otherwise.
func (o *BalanceSheet) GetRemoteWasDeleted() bool {
	if o == nil || o.RemoteWasDeleted == nil {
		var ret bool
		return ret
	}
	return *o.RemoteWasDeleted
}

// GetRemoteWasDeletedOk returns a tuple with the RemoteWasDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BalanceSheet) GetRemoteWasDeletedOk() (*bool, bool) {
	if o == nil || o.RemoteWasDeleted == nil {
		return nil, false
	}
	return o.RemoteWasDeleted, true
}

// HasRemoteWasDeleted returns a boolean if a field has been set.
func (o *BalanceSheet) HasRemoteWasDeleted() bool {
	if o != nil && o.RemoteWasDeleted != nil {
		return true
	}

	return false
}

// SetRemoteWasDeleted gets a reference to the given bool and assigns it to the RemoteWasDeleted field.
func (o *BalanceSheet) SetRemoteWasDeleted(v bool) {
	o.RemoteWasDeleted = &v
}

// GetFieldMappings returns the FieldMappings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BalanceSheet) GetFieldMappings() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.FieldMappings
}

// GetFieldMappingsOk returns a tuple with the FieldMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BalanceSheet) GetFieldMappingsOk() (*map[string]interface{}, bool) {
	if o == nil || o.FieldMappings == nil {
		return nil, false
	}
	return &o.FieldMappings, true
}

// HasFieldMappings returns a boolean if a field has been set.
func (o *BalanceSheet) HasFieldMappings() bool {
	if o != nil && o.FieldMappings != nil {
		return true
	}

	return false
}

// SetFieldMappings gets a reference to the given map[string]interface{} and assigns it to the FieldMappings field.
func (o *BalanceSheet) SetFieldMappings(v map[string]interface{}) {
	o.FieldMappings = v
}

func (o BalanceSheet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.RemoteId.IsSet() {
		toSerialize["remote_id"] = o.RemoteId.Get()
	}
	if o.RemoteData != nil {
		toSerialize["remote_data"] = o.RemoteData
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Currency.IsSet() {
		toSerialize["currency"] = o.Currency.Get()
	}
	if o.Company.IsSet() {
		toSerialize["company"] = o.Company.Get()
	}
	if o.Date.IsSet() {
		toSerialize["date"] = o.Date.Get()
	}
	if o.NetAssets.IsSet() {
		toSerialize["net_assets"] = o.NetAssets.Get()
	}
	if o.Assets != nil {
		toSerialize["assets"] = o.Assets
	}
	if o.Liabilities != nil {
		toSerialize["liabilities"] = o.Liabilities
	}
	if o.Equity != nil {
		toSerialize["equity"] = o.Equity
	}
	if o.RemoteGeneratedAt.IsSet() {
		toSerialize["remote_generated_at"] = o.RemoteGeneratedAt.Get()
	}
	if o.RemoteWasDeleted != nil {
		toSerialize["remote_was_deleted"] = o.RemoteWasDeleted
	}
	if o.FieldMappings != nil {
		toSerialize["field_mappings"] = o.FieldMappings
	}
	return json.Marshal(toSerialize)
}

func (v *BalanceSheet) UnmarshalJSON(src []byte) error {
    type BalanceSheetUnmarshalTarget BalanceSheet

	var intermediateResult BalanceSheetUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = BalanceSheet(intermediateResult)
	return nil
}
type NullableBalanceSheet struct {
	value *BalanceSheet
	isSet bool
}

func (v NullableBalanceSheet) Get() *BalanceSheet {
	return v.value
}

func (v *NullableBalanceSheet) Set(val *BalanceSheet) {
	v.value = val
	v.isSet = true
}

func (v NullableBalanceSheet) IsSet() bool {
	return v.isSet
}

func (v *NullableBalanceSheet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBalanceSheet(val *BalanceSheet) *NullableBalanceSheet {
	return &NullableBalanceSheet{value: val, isSet: true}
}

func (v NullableBalanceSheet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBalanceSheet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


