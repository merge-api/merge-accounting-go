/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_accounting_client

import (
	"encoding/json"
	"fmt"
)

// AccountStatusEnum the model 'AccountStatusEnum'
type AccountStatusEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of AccountStatusEnum
const (
    ACCOUNTSTATUSENUM_MERGE_NONSTANDARD_VALUE AccountStatusEnum = "MERGE_NONSTANDARD_VALUE"
    
	ACCOUNTSTATUSENUM_ACTIVE AccountStatusEnum = "ACTIVE"
	ACCOUNTSTATUSENUM_PENDING AccountStatusEnum = "PENDING"
	ACCOUNTSTATUSENUM_INACTIVE AccountStatusEnum = "INACTIVE"
)

var allowedAccountStatusEnumEnumValues = []AccountStatusEnum{
	"ACTIVE",
	"PENDING",
	"INACTIVE",
}

func (v *AccountStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountStatusEnum(value)
	for _, existing := range allowedAccountStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = ACCOUNTSTATUSENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewAccountStatusEnumFromValue returns a pointer to a valid AccountStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountStatusEnumFromValue(v string) (*AccountStatusEnum, error) {
	ev := AccountStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := ACCOUNTSTATUSENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountStatusEnum) IsValid() bool {
	for _, existing := range allowedAccountStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountStatusEnum value
func (v AccountStatusEnum) Ptr() *AccountStatusEnum {
	return &v
}

type NullableAccountStatusEnum struct {
	value *AccountStatusEnum
	isSet bool
}

func (v NullableAccountStatusEnum) Get() *AccountStatusEnum {
	return v.value
}

func (v *NullableAccountStatusEnum) Set(val *AccountStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountStatusEnum(val *AccountStatusEnum) *NullableAccountStatusEnum {
	return &NullableAccountStatusEnum{value: val, isSet: true}
}

func (v NullableAccountStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

